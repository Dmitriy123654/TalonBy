FILE: BLL/BLL.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="BCrypt.Net-Next" Version="4.0.3" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.4" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.4" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.4" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Portable.BouncyCastle" Version="1.9.0" />
    <PackageReference Include="System.Collections" Version="4.3.0" />
    <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="7.5.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Domain\Domain.csproj" />
  </ItemGroup>

</Project>


FILE: BLL/Services/AuthService.cs
using Domain.Models;
using Microsoft.Extensions.Configuration;
using Domain.ViewModels;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Domain.Interfaces;
using Domain;



namespace BLL.Services
{
    public interface IAuthService
    {
        Task<Result> Register(RegisterModel model);
        Task<LoginResult> Login(LoginModel model);
        Task<User> GetUserByIdAsync(int userId);
        Task UpdateUserAsync(User user);
        Task<Patient> CreatePatientAsync(PatientModel patientDto, int PatientId);
    }


    public class AuthService : IAuthService
    {
        private readonly IUserRepository _userRepository;
        private readonly IConfiguration _configuration;

        public AuthService(IUserRepository userRepository, IConfiguration configuration)
        {
            _userRepository = userRepository;
            _configuration = configuration;
        }

        public async Task<Result> Register(RegisterModel model)
        {
            // Проверка наличия пользователя с таким же email
            if (await _userRepository.GetByEmail(model.Email) != null)
            {
                return new Result { Succeeded = false, Errors = new[] { "User with this email already exists" } };
            }
            
            // Создание нового пользователя
            var user = new User
            {
                Email = model.Email,
                Phone = model.Phone,
                Password = BCrypt.Net.BCrypt.HashPassword(model.Password),
                Role = RoleOfUser.Patient
            };

            await _userRepository.Create(user);

            return new Result { Succeeded = true };
        }

        public async Task<LoginResult> Login(LoginModel model)
        {
            // Поиск пользователя по email
            var user = await _userRepository.GetByEmail(model.Email);

            if (user == null || !BCrypt.Net.BCrypt.Verify(model.Password, user.Password))
            {
                return new LoginResult { Succeeded = false };
            }

            // Генерация JWT-токена
            var token = GenerateJwtToken(user);

            return new LoginResult { Succeeded = true, Token = token };
        }
        public async Task<User> GetUserByIdAsync(int userId)
        {
            return await _userRepository.GetUserByIdAsync(userId);
        }

        public async Task UpdateUserAsync(User user)
        {
            await _userRepository.UpdateUserAsync(user);
        }

        public async Task<Patient> CreatePatientAsync(PatientModel patientDto, int userId)
        {
            var patient = new Patient
            {
                Name = patientDto.Name,
                Gender = patientDto.Gender,
                DateOfBirth = patientDto.DateOfBirth,
                Address = patientDto.Address,
                UserId = userId
            };

            return await _userRepository.CreatePatientAsync(patient);
        }

        private string GenerateJwtToken(User user)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_configuration["Jwt:Key"]);
            var issuer = _configuration["Jwt:Issuer"];
            var audience = _configuration["Jwt:Audience"];

            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                new Claim(ClaimTypes.NameIdentifier, user.UserId.ToString()),
                new Claim(ClaimTypes.Email, user.Email),
                new Claim(ClaimTypes.Role, user.Role.ToString())
            }),
                Expires = DateTime.UtcNow.AddDays(7),
                Issuer = issuer,
                Audience = audience,
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }
    }
}


FILE: BLL/Services/DoctorService.cs
using Domain.Interfaces;
using Domain.Models;
using Domain.ViewModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BLL.Services
{
    public interface IDoctorService
    {
        Task<List<Doctor>> GetAllDoctorsAsync();
        Task<Doctor> GetDoctorByIdAsync(int id);
        Task CreateDoctorAsync(DoctorModel doctorModel);
        Task UpdateDoctorAsync(int id, DoctorModel doctorModel);
        Task DeleteDoctorAsync(int id);
        IEnumerable<Doctor> GetDoctorsByHospital(int hospitalId);
        IEnumerable<Doctor> GetDoctorsBySpecialtyAndHospital(int hospitalId, int specialtyId);
        Task<IEnumerable<Doctor>> GetDoctorsBySpecialityAsync(int specialityId);
        
    }
    public class DoctorService : IDoctorService
    {
        private readonly IDoctorRepository _doctorRepository;
        private readonly IDoctorsSpecialityRepository _specialityRepository;

        public DoctorService(IDoctorRepository doctorRepository, IDoctorsSpecialityRepository specialityRepository)
        {
            _doctorRepository = doctorRepository;
            _specialityRepository = specialityRepository;
        }

        public async Task<List<Doctor>> GetAllDoctorsAsync()
        {
            return await _doctorRepository.GetAllAsync();
        }

        public async Task<Doctor> GetDoctorByIdAsync(int id)
        {
            return await _doctorRepository.GetByIdAsync(id);
        }

        public async Task CreateDoctorAsync(DoctorModel doctorModel)
        {
            var doctor = new Doctor
            {
                HospitalId = doctorModel.HospitalId,
                DoctorsSpecialityId = doctorModel.DoctorsSpecialityId,
                FullName = doctorModel.FullName,
                Photo = doctorModel.Photo,
                WorkingHours = doctorModel.WorkingHours,
                Office = doctorModel.Office,
                AdditionalInfo = doctorModel.AdditionalInfo
            };

            await _doctorRepository.AddAsync(doctor);
        }

        public async Task UpdateDoctorAsync(int id, DoctorModel doctorModel)
        {
            var doctor = await _doctorRepository.GetByIdAsync(id);
            if (doctor != null)
            {
                doctor.HospitalId = doctorModel.HospitalId;
                doctor.DoctorsSpecialityId = doctorModel.DoctorsSpecialityId;
                doctor.FullName = doctorModel.FullName;
                doctor.Photo = doctorModel.Photo;
                doctor.WorkingHours = doctorModel.WorkingHours;
                doctor.Office = doctorModel.Office;
                doctor.AdditionalInfo = doctorModel.AdditionalInfo;


                await _doctorRepository.UpdateAsync(doctor);
            }
        }

        public async Task DeleteDoctorAsync(int id)
        {
            await _doctorRepository.DeleteAsync(id);
        }
        public IEnumerable<Doctor> GetDoctorsByHospital(int hospitalId)
        {
            return _doctorRepository.GetByHospitalId(hospitalId);
        }

        public IEnumerable<Doctor> GetDoctorsBySpecialtyAndHospital(int hospitalId, int specialtyId)
        {
            return _doctorRepository.GetBySpecialtyAndHospitalId(hospitalId, specialtyId);
        }

        public async Task<IEnumerable<Doctor>> GetDoctorsBySpecialityAsync(int specialityId)
        {
            return await _doctorRepository.GetBySpecialityAsync(specialityId);
        }

       
    }
}


FILE: BLL/Services/DoctorSpecialityService.cs
using Domain.Interfaces;
using Domain.Models;
using Domain.ViewModels;
using Microsoft.EntityFrameworkCore;
using Org.BouncyCastle.Crypto;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BLL.Services
{
    public interface IDoctorsSpecialityService
    {
        Task<List<DoctorsSpeciality>> GetAllDoctorsSpecialitiesAsync();
        Task<DoctorsSpeciality> GetDoctorsSpecialityByIdAsync(int id);
        Task<int> CreateDoctorsSpecialityAsync(DoctorsSpecialityModel specialityModel);
        Task UpdateDoctorsSpecialityAsync(int id, DoctorsSpecialityModel specialityModel);
        Task DeleteDoctorsSpecialityAsync(int id);
        IEnumerable<DoctorsSpeciality> GetSpecialitiesByHospital(int hospitalId);
    }
    public class DoctorsSpecialityService : IDoctorsSpecialityService
    {
        private readonly IDoctorsSpecialityRepository _doctorsSpecialityRepository;

        public DoctorsSpecialityService(IDoctorsSpecialityRepository doctorsSpecialityRepository)
        {
            _doctorsSpecialityRepository = doctorsSpecialityRepository;
        }

        public async Task<List<DoctorsSpeciality>> GetAllDoctorsSpecialitiesAsync()
        {
            return await _doctorsSpecialityRepository.GetAllAsync();
        }

        public async Task<DoctorsSpeciality> GetDoctorsSpecialityByIdAsync(int id)
        {
            return await _doctorsSpecialityRepository.GetByIdAsync(id);
        }

        public async Task<int> CreateDoctorsSpecialityAsync(DoctorsSpecialityModel specialityModel)
        {
            var speciality = new DoctorsSpeciality
            {
                Name = specialityModel.Name
            };

            await _doctorsSpecialityRepository.AddAsync(speciality);
            return speciality.DoctorsSpecialityId;
        }


        public async Task UpdateDoctorsSpecialityAsync(int id, DoctorsSpecialityModel specialityModel)
        {
            var speciality = await _doctorsSpecialityRepository.GetByIdAsync(id);
            if (speciality != null)
            {
                speciality.Name = specialityModel.Name;
                await _doctorsSpecialityRepository.UpdateAsync(speciality);
            }
        }

        public async Task DeleteDoctorsSpecialityAsync(int id)
        {
            await _doctorsSpecialityRepository.DeleteAsync(id);
        }
        public IEnumerable<DoctorsSpeciality> GetSpecialitiesByHospital(int hospitalId)
        {
            return _doctorsSpecialityRepository.GetByHospitalId(hospitalId);
        }
    }
}


FILE: BLL/Services/HospitalService.cs


using Domain.Interfaces;
using Domain.Models;
using Domain.ViewModels;

namespace BLL.Services
{
    public interface IHospitalService
    {
        List<Hospital> GetAllHospitals();
        Hospital GetById(int id);
        void Add(HospitalModel hospitalModel);
        void Update(HospitalModel hospitalModel, int id);
        void Delete(int id);
        IEnumerable<Hospital> SearchHospitals(HospitalSearchParameters parameters);
    }

    public class HospitalService : IHospitalService
    {
        private readonly IHospitalRepository _hospitalRepository;

        public HospitalService(IHospitalRepository hospitalRepository)
        {
            _hospitalRepository = hospitalRepository;
        }

        public List<Hospital> GetAllHospitals()
        {
            return _hospitalRepository.GetAll().ToList();
        }

        public Hospital GetById(int id)
        {
            return _hospitalRepository.GetById(id);
        }

        public void Add(HospitalModel hospitalModel)
        {
            var hospital = new Hospital
            {
                Name = hospitalModel.Name,
                Address = hospitalModel.Address,
                Type = hospitalModel.Type,
                WorkingHours = hospitalModel.WorkingHours,
                Phones = hospitalModel.Phones,
                Email = hospitalModel.Email,
                Description = hospitalModel.Description
            };

            _hospitalRepository.Add(hospital);
        }

        public void Update(HospitalModel hospitalModel, int id)
        {
            var hospital = _hospitalRepository.GetById(id);
            if (hospital != null)
            {
                hospital.Name = hospitalModel.Name;
                hospital.Address = hospitalModel.Address;
                hospital.Type = hospitalModel.Type;
                hospital.WorkingHours = hospitalModel.WorkingHours;
                hospital.Phones = hospitalModel.Phones;
                hospital.Email = hospitalModel.Email;
                hospital.Description = hospitalModel.Description;

                _hospitalRepository.Update(hospital);
            }
        }

        public void Delete(int id)
        {
            _hospitalRepository.Delete(id);
        }
        public IEnumerable<Hospital> SearchHospitals(HospitalSearchParameters parameters)
        {
            return _hospitalRepository.SearchHospitals(parameters);
        }
    }

}


FILE: BLL/Services/MedicalAppointmentService.cs
using Domain.Interfaces;
using Domain.Models;
using Domain.ViewModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BLL.Services
{
    public interface IMedicalAppointmentService
    {
        Task<MedicalAppointment> CreateMedicalAppointmentAsync(MedicalAppointmentModel model);
        Task UpdateMedicalAppointmentAsync(int id, MedicalAppointmentModel model);
        Task DeleteMedicalAppointmentAsync(int id);
        Task<MedicalAppointment> GetMedicalAppointmentByIdAsync(int id);
        Task<IEnumerable<MedicalAppointmentDTO>> GetMedicalAppointmentsAsync(MedicalAppointmentSearchParameters parameters);
    }

    public class MedicalAppointmentService : IMedicalAppointmentService
    {
        private readonly IMedicalAppointmentRepository _medicalAppointmentRepository;

        public MedicalAppointmentService(IMedicalAppointmentRepository medicalAppointmentRepository)
        {
            _medicalAppointmentRepository = medicalAppointmentRepository;
        }

        public async Task<MedicalAppointment> CreateMedicalAppointmentAsync(MedicalAppointmentModel model)
        {
            var appointment = new MedicalAppointment
            {
                HospitalId = model.HospitalId,
                PatientId = model.PatientId,
                DoctorId = model.DoctorId,
                ReceptionStatusId = model.ReceptionStatusId,
                Date = model.Date,
                Time = model.Time,
                TextResult = model.TextResult,
                Description = model.Description
            };
            return await _medicalAppointmentRepository.CreateAsync(appointment);
        }

        public async Task UpdateMedicalAppointmentAsync(int id, MedicalAppointmentModel model)
        {
            var appointment = await _medicalAppointmentRepository.GetByIdAsync(id);
            if (appointment == null)
                throw new Exception($"MedicalAppointment with ID {id} not found.");

            appointment.HospitalId = model.HospitalId;
            appointment.PatientId = model.PatientId;
            appointment.DoctorId = model.DoctorId;
            appointment.ReceptionStatusId = model.ReceptionStatusId;
            appointment.Date = model.Date;
            appointment.Time = model.Time;
            appointment.TextResult = model.TextResult;
            appointment.Description = model.Description;

            await _medicalAppointmentRepository.UpdateAsync(appointment);
        }

        public async Task DeleteMedicalAppointmentAsync(int id)
        {
            var appointment = await _medicalAppointmentRepository.GetByIdAsync(id);
            if (appointment == null)
                throw new Exception($"MedicalAppointment with ID {id} not found.");

            await _medicalAppointmentRepository.DeleteAsync(appointment);
        }

        public async Task<MedicalAppointment> GetMedicalAppointmentByIdAsync(int id)
        {
            return await _medicalAppointmentRepository.GetByIdAsync(id);
        }

        public async Task<IEnumerable<MedicalAppointmentDTO>> GetMedicalAppointmentsAsync(MedicalAppointmentSearchParameters parameters)
        {
            return await _medicalAppointmentRepository.GetAllAsync(parameters);
        }
    }
}


FILE: BLL/Services/PatientService.cs
using Domain.Interfaces;
using Domain.Models;
using Domain.ViewModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BLL.Services
{
    public interface IPatientService
    {
        Patient UpdatePatient(int userId, PatientModel patientUpdateModel);
    }
    public class PatientService : IPatientService
    {
        private IPatientRepository patientRepository;

        public PatientService(IPatientRepository patientRepository)
        {
            this.patientRepository = patientRepository;
        }
        public Patient UpdatePatient(int userId, PatientModel patientUpdateModel)
        {
            var patient = patientRepository.GetPatientByUserId(userId);
            if (patient == null)
            {
                throw new Exception("Patient not found");
            }

            patient.Name = patientUpdateModel.Name;
            patient.Gender = patientUpdateModel.Gender;
            patient.DateOfBirth = patientUpdateModel.DateOfBirth;
            patient.Address = patientUpdateModel.Address;

            return patientRepository.UpdatePatient(patient);
        }
    }
}


FILE: BLL/Services/ReceptionStatusService.cs
using Domain.Interfaces;
using Domain.Models;
using Domain.ViewModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BLL.Services
{
    public interface IReceptionStatusService
    {
        Task<List<ReceptionStatusModel>> GetAllReceptionStatusesAsync();
        Task<ReceptionStatusModel> GetReceptionStatusByIdAsync(int id);
        Task<ReceptionStatusModel> GetReceptionStatusByStatusAsync(Domain.Status status);
        Task CreateReceptionStatusAsync(ReceptionStatusModel receptionStatusModel);
        Task UpdateReceptionStatusAsync(ReceptionStatusModel receptionStatusModel);
        Task DeleteReceptionStatusAsync(int id);
    }
    public class ReceptionStatusService : IReceptionStatusService
    {
        private readonly IReceptionStatusRepository _receptionStatusRepository;

        public ReceptionStatusService(IReceptionStatusRepository receptionStatusRepository)
        {
            _receptionStatusRepository = receptionStatusRepository;
        }

        public async Task<List<ReceptionStatusModel>> GetAllReceptionStatusesAsync()
        {
            var receptionStatuses = await _receptionStatusRepository.GetAllAsync();
            return receptionStatuses.Select(rs => new ReceptionStatusModel { Status = rs.Status }).ToList();
        }

        public async Task<ReceptionStatusModel> GetReceptionStatusByIdAsync(int id)
        {
            var receptionStatus = await _receptionStatusRepository.GetByIdAsync(id);
            if (receptionStatus == null)
                return null;

            return new ReceptionStatusModel { Status = receptionStatus.Status };
        }

        public async Task<ReceptionStatusModel> GetReceptionStatusByStatusAsync(Domain.Status status)
        {
            var receptionStatus = await _receptionStatusRepository.GetByStatusAsync(status);
            if (receptionStatus == null)
                return null;


            return new ReceptionStatusModel { Status = receptionStatus.Status };
        }

        public async Task CreateReceptionStatusAsync(ReceptionStatusModel receptionStatusModel)
        {
            var receptionStatus = new ReceptionStatus { Status = receptionStatusModel.Status };
            await _receptionStatusRepository.AddAsync(receptionStatus);
        }

        public async Task UpdateReceptionStatusAsync(ReceptionStatusModel receptionStatusModel)
        {
            var receptionStatus = await _receptionStatusRepository.GetByStatusAsync(receptionStatusModel.Status);
            if (receptionStatus == null)
                throw new ArgumentException("Статус приема не найден");

            receptionStatus.Status = receptionStatusModel.Status;
            await _receptionStatusRepository.UpdateAsync(receptionStatus);
        }

        public async Task DeleteReceptionStatusAsync(int id)
        {
            await _receptionStatusRepository.DeleteAsync(id);
        }
    }
}


FILE: DAL/ApplicationDbContext.cs
using Domain.Models;
using Microsoft.EntityFrameworkCore;

namespace DAL
{
    public class ApplicationContext : DbContext
    {
        public ApplicationContext(DbContextOptions<ApplicationContext> options) : base(options)
        {
        }
        public DbSet<User> Users { get; set; }
        public DbSet<Patient> Patients { get; set; }
        public DbSet<MedicalAppointment> MedicalAppointments { get; set; }
        public DbSet<Hospital> Hospitals { get; set; }
        public DbSet<ReceptionStatus> ReceptionStatuses { get; set; }
        public DbSet<DoctorsSpeciality> DoctorsSpecialities { get; set; }
        public DbSet<Doctor> Doctors { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
           optionsBuilder.UseSqlServer(@"Server=(localdb)\mssqllocaldb;Database=TalonBy;Trusted_Connection=True;");

        }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>()
                .HasOne(u => u.Patient)
                .WithOne(p => p.User)
                .HasForeignKey<Patient>(p => p.UserId);

            modelBuilder.Entity<MedicalAppointment>()
                .HasOne(ma => ma.Hospital)
                .WithMany(h => h.MedicalAppointments)
                .HasForeignKey(ma => ma.HospitalId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<MedicalAppointment>()
                .HasOne(ma => ma.Doctor)
                .WithMany(d => d.MedicalAppointments)
                .HasForeignKey(ma => ma.DoctorId);

            modelBuilder.Entity<MedicalAppointment>()
                .HasOne(ma => ma.ReceptionStatus)
                .WithMany(rs => rs.MedicalAppointments)
                .HasForeignKey(ma => ma.ReceptionStatusId);

            modelBuilder.Entity<Doctor>()
                .HasOne(d => d.DoctorsSpeciality)
                .WithMany(ds => ds.Doctors)
                .HasForeignKey(d => d.DoctorsSpecialityId);

            modelBuilder.Entity<Doctor>()
                .HasOne(d => d.Hospital)
                .WithMany(h => h.Doctors)
                .HasForeignKey(d => d.HospitalId)
                .OnDelete(DeleteBehavior.Restrict);
        }
    }
}


FILE: DAL/DAL.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="BCrypt.Net-Next" Version="4.0.3" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.4" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.4" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.4" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="7.5.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Domain\Domain.csproj" />
  </ItemGroup>

</Project>


FILE: DAL/DoctorRepository.cs
using Domain.Interfaces;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DAL
{
    public class DoctorRepository : IDoctorRepository
    {
        private readonly ApplicationContext _context;

        public DoctorRepository(ApplicationContext context)
        {
            _context = context;
        }

        public async Task<List<Doctor>> GetAllAsync()
        {
            return await _context.Doctors
                .Include(d => d.DoctorsSpeciality)
                .Include(d => d.Hospital)
                .ToListAsync();
        }

        public async Task<Doctor> GetByIdAsync(int id)
        {
            return await _context.Doctors
                .Include(d => d.DoctorsSpeciality)
                .Include(d => d.Hospital)
                .FirstOrDefaultAsync(d => d.DoctorId == id);
        }

        public async Task AddAsync(Doctor doctor)
        {
            await _context.Doctors.AddAsync(doctor);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateAsync(Doctor doctor)
        {
            _context.Entry(doctor).State = EntityState.Modified;
            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            var doctor = await _context.Doctors.FindAsync(id);
            if (doctor != null)
            {
                _context.Doctors.Remove(doctor);
                await _context.SaveChangesAsync();
            }
        }
        public IEnumerable<Doctor> GetByHospitalId(int hospitalId)
        {
            return _context.Doctors
                .Where(d => d.HospitalId == hospitalId)
                .OrderBy(d => d.DoctorsSpeciality.Name)
                .ToList();
        }

        public IEnumerable<Doctor> GetBySpecialtyAndHospitalId(int hospitalId, int specialtyId)
        {
            return _context.Doctors
                .Where(d => d.HospitalId == hospitalId && d.DoctorsSpecialityId == specialtyId)
                .ToList();
        }

        public async Task<IEnumerable<Doctor>> GetBySpecialityAsync(int specialityId)
        {
            return await _context.Doctors
                .Where(d => d.DoctorsSpecialityId == specialityId)
                .ToListAsync();
        }
    }
}


FILE: DAL/DoctorSpecialityRepository.cs
using Domain.Interfaces;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace DAL
{
    public class DoctorsSpecialityRepository : IDoctorsSpecialityRepository
    {
        private readonly ApplicationContext _context;

        public DoctorsSpecialityRepository(ApplicationContext context)
        {
            _context = context;
        }

        public async Task<List<DoctorsSpeciality>> GetAllAsync()
        {
            return await _context.DoctorsSpecialities.ToListAsync();
        }

        public async Task<DoctorsSpeciality> GetByIdAsync(int id)
        {
            return await _context.DoctorsSpecialities.FindAsync(id);
        }

        public async Task AddAsync(DoctorsSpeciality speciality)
        {
            await _context.DoctorsSpecialities.AddAsync(speciality);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateAsync(DoctorsSpeciality speciality)
        {
            _context.Entry(speciality).State = EntityState.Modified;
            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            var speciality = await _context.DoctorsSpecialities.FindAsync(id);
            if (speciality != null)
            {
                _context.DoctorsSpecialities.Remove(speciality);
                await _context.SaveChangesAsync();
            }
        }

        public IEnumerable<DoctorsSpeciality> GetByHospitalId(int hospitalId)
        {
            return _context.DoctorsSpecialities
                .Where(ds => _context.Doctors
                    .Any(d => d.HospitalId == hospitalId
                               && d.DoctorsSpecialityId == ds.DoctorsSpecialityId))
                .Where(ds => ds.DoctorsSpecialityId != 1 && ds.DoctorsSpecialityId != 2)
                .ToList();
        }
    }
}


FILE: DAL/HospitalRepository.cs
using Domain.Interfaces;
using Domain.Models;
using Domain.ViewModels;
using Microsoft.EntityFrameworkCore;

namespace DAL
{

    public class HospitalRepository : IHospitalRepository
    {
        private readonly ApplicationContext _context;

        public HospitalRepository(ApplicationContext context)
        {
            _context = context;
        }

        public IEnumerable<Hospital> GetAll()
        {
            return _context.Hospitals.ToList();
        }

        public Hospital GetById(int id)
        {
            return _context.Hospitals.Find(id);
        }

        public void Add(Hospital hospital)
        {
            _context.Hospitals.Add(hospital);
            _context.SaveChanges();
        }

        public void Update(Hospital hospital)
        {
            _context.Entry(hospital).State = EntityState.Modified;
            _context.SaveChanges();
        }

        public void Delete(int id)
        {
            var hospital = _context.Hospitals.Find(id);
            if (hospital != null)
            {
                _context.Hospitals.Remove(hospital);
                _context.SaveChanges();
            }
        }
        public IEnumerable<Hospital> SearchHospitals(HospitalSearchParameters parameters)
        {
            var query = _context.Hospitals.AsQueryable();

            if (parameters.HospitalTypes != null && parameters.HospitalTypes.Any())
            {
                query = query.Where(h => parameters.HospitalTypes.Contains(h.Type));
            }

            if (!string.IsNullOrEmpty(parameters.Name))
            {
                query = query.Where(h => h.Name.Contains(parameters.Name));
            }

            return query.ToList();
        }
    }
}


FILE: DAL/MedicalAppointmentRepository.cs
using Domain.Interfaces;
using Domain.Models;
using Domain.ViewModels;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DAL
{
    public class MedicalAppointmentRepository : IMedicalAppointmentRepository
    {
        private readonly ApplicationContext _dbContext;

        public MedicalAppointmentRepository(ApplicationContext dbContext)
        {
            _dbContext = dbContext;
        }

        public async Task<MedicalAppointment> CreateAsync(MedicalAppointment appointment)
        {
            _dbContext.MedicalAppointments.Add(appointment);
            await _dbContext.SaveChangesAsync();
            return appointment;
        }

        public async Task UpdateAsync(MedicalAppointment appointment)
        {
            _dbContext.MedicalAppointments.Update(appointment);
            await _dbContext.SaveChangesAsync();
        }

        public async Task DeleteAsync(MedicalAppointment appointment)
        {
            _dbContext.MedicalAppointments.Remove(appointment);
            await _dbContext.SaveChangesAsync();
        }

        public async Task<MedicalAppointment> GetByIdAsync(int id)
        {
            return await _dbContext.MedicalAppointments.FindAsync(id);
        }

        public async Task<IEnumerable<MedicalAppointmentDTO>> GetAllAsync(MedicalAppointmentSearchParameters parameters)
        {
            var query = _dbContext.MedicalAppointments
                .Include(a => a.Hospital)
                .Include(a => a.Patient)
                .Include(a => a.Doctor)
                .Include(a => a.ReceptionStatus)
                .AsQueryable();

            if (parameters.HospitalId.HasValue)
                query = query.Where(a => a.HospitalId == parameters.HospitalId.Value);

            if (parameters.PatientId.HasValue)
                query = query.Where(a => a.PatientId == parameters.PatientId.Value);

            if (parameters.DoctorId.HasValue)
                query = query.Where(a => a.DoctorId == parameters.DoctorId.Value);

            if (parameters.ReceptionStatusId.HasValue)
                query = query.Where(a => a.ReceptionStatusId == parameters.ReceptionStatusId.Value);

            if (parameters.DateFrom.HasValue)
                query = query.Where(a => a.Date >= parameters.DateFrom.Value);

            if (parameters.DateTo.HasValue)
                query = query.Where(a => a.Date <= parameters.DateTo.Value);

            if (parameters.TimeFrom.HasValue)
                query = query.Where(a => a.Time >= parameters.TimeFrom.Value);

            if (parameters.TimeTo.HasValue)
                query = query.Where(a => a.Time <= parameters.TimeTo.Value);

            var result = await query.Select(a => new MedicalAppointmentDTO
            {
                Id = a.MedicalAppointmentId,
                HospitalName = a.Hospital.Name,
                PatientName = a.Patient.Name,
                DoctorName = a.Doctor.FullName,
                DoctorSpecialty = a.Doctor.DoctorsSpeciality.Name,
                ReceptionStatus = a.ReceptionStatus.Status.ToString(),
                Description = a.Description

            }).ToListAsync();

            return result;
        }
    }
}


FILE: DAL/Migrations/20240514224112_InitialMigration.Designer.cs
// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240514224112_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DoctorsSpecialityId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.HasIndex("DoctorsSpecialityId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Domain.Models.DoctorsSpeciality", b =>
                {
                    b.Property<int>("DoctorsSpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorsSpecialityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DoctorsSpecialityId");

                    b.ToTable("DoctorsSpecialities");
                });

            modelBuilder.Entity("Domain.Models.Hospital", b =>
                {
                    b.Property<int>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Enail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phones")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HospitalId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("Domain.Models.MedicalAppointment", b =>
                {
                    b.Property<int>("MedicalAppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalAppointmentId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ReceptionStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TextResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("MedicalAppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionStatusId");

                    b.ToTable("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Domain.Models.ReceptionStatus", b =>
                {
                    b.Property<int>("ReceptionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceptionStatusId"));

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("ReceptionStatusId");

                    b.ToTable("ReceptionStatuses");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.Doctor", b =>
                {
                    b.HasOne("Domain.Models.DoctorsSpeciality", "DoctorsSpeciality")
                        .WithMany("Doctors")
                        .HasForeignKey("DoctorsSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorsSpeciality");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Domain.Models.MedicalAppointment", b =>
                {
                    b.HasOne("Domain.Models.Doctor", "Doctor")
                        .WithMany("MedicalAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Hospital", "Hospital")
                        .WithMany("MedicalAppointments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ReceptionStatus", "ReceptionStatus")
                        .WithMany("MedicalAppointments")
                        .HasForeignKey("ReceptionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");

                    b.Navigation("Patient");

                    b.Navigation("ReceptionStatus");
                });

            modelBuilder.Entity("Domain.Models.Patient", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Models.Patient", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Doctor", b =>
                {
                    b.Navigation("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.DoctorsSpeciality", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Domain.Models.Hospital", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.ReceptionStatus", b =>
                {
                    b.Navigation("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}


FILE: DAL/Migrations/20240514224112_InitialMigration.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DAL.Migrations
{
    /// <inheritdoc />
    public partial class InitialMigration : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "DoctorsSpecialities",
                columns: table => new
                {
                    DoctorsSpecialityId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DoctorsSpecialities", x => x.DoctorsSpecialityId);
                });

            migrationBuilder.CreateTable(
                name: "Hospitals",
                columns: table => new
                {
                    HospitalId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Address = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    Type = table.Column<int>(type: "int", maxLength: 100, nullable: false),
                    WorkingHours = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Phones = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Enail = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hospitals", x => x.HospitalId);
                });

            migrationBuilder.CreateTable(
                name: "ReceptionStatuses",
                columns: table => new
                {
                    ReceptionStatusId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Status = table.Column<int>(type: "int", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReceptionStatuses", x => x.ReceptionStatusId);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    UserId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Email = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Phone = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Password = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Role = table.Column<int>(type: "int", nullable: false),
                    PatientId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.UserId);
                });

            migrationBuilder.CreateTable(
                name: "Doctors",
                columns: table => new
                {
                    DoctorId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    HospitalId = table.Column<int>(type: "int", nullable: false),
                    DoctorsSpecialityId = table.Column<int>(type: "int", nullable: false),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Photo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WorkingHours = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Office = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    AdditionalInfo = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Doctors", x => x.DoctorId);
                    table.ForeignKey(
                        name: "FK_Doctors_DoctorsSpecialities_DoctorsSpecialityId",
                        column: x => x.DoctorsSpecialityId,
                        principalTable: "DoctorsSpecialities",
                        principalColumn: "DoctorsSpecialityId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Doctors_Hospitals_HospitalId",
                        column: x => x.HospitalId,
                        principalTable: "Hospitals",
                        principalColumn: "HospitalId",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Patients",
                columns: table => new
                {
                    PatientId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Gender = table.Column<int>(type: "int", nullable: false),
                    DateOfBirth = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Address = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Patients", x => x.PatientId);
                    table.ForeignKey(
                        name: "FK_Patients_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId");
                });

            migrationBuilder.CreateTable(
                name: "MedicalAppointments",
                columns: table => new
                {
                    MedicalAppointmentId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    HospitalId = table.Column<int>(type: "int", nullable: false),
                    PatientId = table.Column<int>(type: "int", nullable: false),
                    DoctorId = table.Column<int>(type: "int", nullable: false),
                    ReceptionStatusId = table.Column<int>(type: "int", nullable: false),
                    Date = table.Column<DateTime>(type: "date", nullable: false),
                    Time = table.Column<TimeSpan>(type: "time", nullable: false),
                    TextResult = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedicalAppointments", x => x.MedicalAppointmentId);
                    table.ForeignKey(
                        name: "FK_MedicalAppointments_Doctors_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "Doctors",
                        principalColumn: "DoctorId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MedicalAppointments_Hospitals_HospitalId",
                        column: x => x.HospitalId,
                        principalTable: "Hospitals",
                        principalColumn: "HospitalId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MedicalAppointments_Patients_PatientId",
                        column: x => x.PatientId,
                        principalTable: "Patients",
                        principalColumn: "PatientId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MedicalAppointments_ReceptionStatuses_ReceptionStatusId",
                        column: x => x.ReceptionStatusId,
                        principalTable: "ReceptionStatuses",
                        principalColumn: "ReceptionStatusId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Doctors_DoctorsSpecialityId",
                table: "Doctors",
                column: "DoctorsSpecialityId");

            migrationBuilder.CreateIndex(
                name: "IX_Doctors_HospitalId",
                table: "Doctors",
                column: "HospitalId");

            migrationBuilder.CreateIndex(
                name: "IX_MedicalAppointments_DoctorId",
                table: "MedicalAppointments",
                column: "DoctorId");

            migrationBuilder.CreateIndex(
                name: "IX_MedicalAppointments_HospitalId",
                table: "MedicalAppointments",
                column: "HospitalId");

            migrationBuilder.CreateIndex(
                name: "IX_MedicalAppointments_PatientId",
                table: "MedicalAppointments",
                column: "PatientId");

            migrationBuilder.CreateIndex(
                name: "IX_MedicalAppointments_ReceptionStatusId",
                table: "MedicalAppointments",
                column: "ReceptionStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_Patients_UserId",
                table: "Patients",
                column: "UserId",
                unique: true,
                filter: "[UserId] IS NOT NULL");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "MedicalAppointments");

            migrationBuilder.DropTable(
                name: "Doctors");

            migrationBuilder.DropTable(
                name: "Patients");

            migrationBuilder.DropTable(
                name: "ReceptionStatuses");

            migrationBuilder.DropTable(
                name: "DoctorsSpecialities");

            migrationBuilder.DropTable(
                name: "Hospitals");

            migrationBuilder.DropTable(
                name: "Users");
        }
    }
}


FILE: DAL/Migrations/20240514225702_InitialMigration2.Designer.cs
// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240514225702_InitialMigration2")]
    partial class InitialMigration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DoctorsSpecialityId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.HasIndex("DoctorsSpecialityId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Domain.Models.DoctorsSpeciality", b =>
                {
                    b.Property<int>("DoctorsSpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorsSpecialityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DoctorsSpecialityId");

                    b.ToTable("DoctorsSpecialities");
                });

            modelBuilder.Entity("Domain.Models.Hospital", b =>
                {
                    b.Property<int>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Enail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phones")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HospitalId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("Domain.Models.MedicalAppointment", b =>
                {
                    b.Property<int>("MedicalAppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalAppointmentId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ReceptionStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TextResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("MedicalAppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionStatusId");

                    b.ToTable("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Domain.Models.ReceptionStatus", b =>
                {
                    b.Property<int>("ReceptionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceptionStatusId"));

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("ReceptionStatusId");

                    b.ToTable("ReceptionStatuses");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.Doctor", b =>
                {
                    b.HasOne("Domain.Models.DoctorsSpeciality", "DoctorsSpeciality")
                        .WithMany("Doctors")
                        .HasForeignKey("DoctorsSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorsSpeciality");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Domain.Models.MedicalAppointment", b =>
                {
                    b.HasOne("Domain.Models.Doctor", "Doctor")
                        .WithMany("MedicalAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Hospital", "Hospital")
                        .WithMany("MedicalAppointments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ReceptionStatus", "ReceptionStatus")
                        .WithMany("MedicalAppointments")
                        .HasForeignKey("ReceptionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");

                    b.Navigation("Patient");

                    b.Navigation("ReceptionStatus");
                });

            modelBuilder.Entity("Domain.Models.Patient", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Models.Patient", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Doctor", b =>
                {
                    b.Navigation("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.DoctorsSpeciality", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Domain.Models.Hospital", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.ReceptionStatus", b =>
                {
                    b.Navigation("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}


FILE: DAL/Migrations/20240514225702_InitialMigration2.cs
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DAL.Migrations
{
    /// <inheritdoc />
    public partial class InitialMigration2 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "Photo",
                table: "Doctors",
                type: "nvarchar(max)",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "nvarchar(max)");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "Photo",
                table: "Doctors",
                type: "nvarchar(max)",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "nvarchar(max)",
                oldNullable: true);
        }
    }
}


FILE: DAL/Migrations/20250218130622_FixHospitalEmailColumn.Designer.cs
// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250218130622_FixHospitalEmailColumn")]
    partial class FixHospitalEmailColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DoctorsSpecialityId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.HasIndex("DoctorsSpecialityId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Domain.Models.DoctorsSpeciality", b =>
                {
                    b.Property<int>("DoctorsSpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorsSpecialityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DoctorsSpecialityId");

                    b.ToTable("DoctorsSpecialities");
                });

            modelBuilder.Entity("Domain.Models.Hospital", b =>
                {
                    b.Property<int>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phones")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HospitalId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("Domain.Models.MedicalAppointment", b =>
                {
                    b.Property<int>("MedicalAppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalAppointmentId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ReceptionStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TextResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("MedicalAppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionStatusId");

                    b.ToTable("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Domain.Models.ReceptionStatus", b =>
                {
                    b.Property<int>("ReceptionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceptionStatusId"));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ReceptionStatusId");

                    b.ToTable("ReceptionStatuses");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.Doctor", b =>
                {
                    b.HasOne("Domain.Models.DoctorsSpeciality", "DoctorsSpeciality")
                        .WithMany("Doctors")
                        .HasForeignKey("DoctorsSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorsSpeciality");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Domain.Models.MedicalAppointment", b =>
                {
                    b.HasOne("Domain.Models.Doctor", "Doctor")
                        .WithMany("MedicalAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Hospital", "Hospital")
                        .WithMany("MedicalAppointments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ReceptionStatus", "ReceptionStatus")
                        .WithMany("MedicalAppointments")
                        .HasForeignKey("ReceptionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");

                    b.Navigation("Patient");

                    b.Navigation("ReceptionStatus");
                });

            modelBuilder.Entity("Domain.Models.Patient", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Models.Patient", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Doctor", b =>
                {
                    b.Navigation("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.DoctorsSpeciality", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Domain.Models.Hospital", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.ReceptionStatus", b =>
                {
                    b.Navigation("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}


FILE: DAL/Migrations/20250218130622_FixHospitalEmailColumn.cs
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DAL.Migrations
{
    /// <inheritdoc />
    public partial class FixHospitalEmailColumn : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.RenameColumn(
                name: "Enail",
                table: "Hospitals",
                newName: "Email");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.RenameColumn(
                name: "Email",
                table: "Hospitals",
                newName: "Enail");
        }
    }
}


FILE: DAL/Migrations/ApplicationContextModelSnapshot.cs
// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DoctorsSpecialityId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.HasIndex("DoctorsSpecialityId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Domain.Models.DoctorsSpeciality", b =>
                {
                    b.Property<int>("DoctorsSpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorsSpecialityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DoctorsSpecialityId");

                    b.ToTable("DoctorsSpecialities");
                });

            modelBuilder.Entity("Domain.Models.Hospital", b =>
                {
                    b.Property<int>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phones")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HospitalId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("Domain.Models.MedicalAppointment", b =>
                {
                    b.Property<int>("MedicalAppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalAppointmentId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ReceptionStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TextResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("MedicalAppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionStatusId");

                    b.ToTable("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Domain.Models.ReceptionStatus", b =>
                {
                    b.Property<int>("ReceptionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceptionStatusId"));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ReceptionStatusId");

                    b.ToTable("ReceptionStatuses");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.Doctor", b =>
                {
                    b.HasOne("Domain.Models.DoctorsSpeciality", "DoctorsSpeciality")
                        .WithMany("Doctors")
                        .HasForeignKey("DoctorsSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorsSpeciality");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Domain.Models.MedicalAppointment", b =>
                {
                    b.HasOne("Domain.Models.Doctor", "Doctor")
                        .WithMany("MedicalAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Hospital", "Hospital")
                        .WithMany("MedicalAppointments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ReceptionStatus", "ReceptionStatus")
                        .WithMany("MedicalAppointments")
                        .HasForeignKey("ReceptionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");

                    b.Navigation("Patient");

                    b.Navigation("ReceptionStatus");
                });

            modelBuilder.Entity("Domain.Models.Patient", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Models.Patient", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Doctor", b =>
                {
                    b.Navigation("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.DoctorsSpeciality", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Domain.Models.Hospital", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.ReceptionStatus", b =>
                {
                    b.Navigation("MedicalAppointments");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}


FILE: DAL/PatientRepository.cs
using Domain.Interfaces;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DAL
{
    public class PatientRepository : IPatientRepository
    {
        private ApplicationContext db; 

        public PatientRepository(ApplicationContext dbContext)
        {
            db = dbContext;
        }
        public Patient GetPatientByUserId(int userId)
        {
            return db.Patients.FirstOrDefault(p => p.UserId == userId);
        }

        public Patient UpdatePatient(Patient patient)
        {
            db.Patients.Update(patient);
            db.SaveChanges();
            return patient;
        }
    }
}


FILE: DAL/ReceptionStatusRepository.cs
using Domain.Interfaces;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DAL
{
    public class ReceptionStatusRepository : IReceptionStatusRepository
    {
        private readonly ApplicationContext _context;

        public ReceptionStatusRepository(ApplicationContext context)
        {
            _context = context;
        }

        public async Task<List<ReceptionStatus>> GetAllAsync()
        {
            return await _context.ReceptionStatuses.ToListAsync();
        }

        public async Task<ReceptionStatus> GetByIdAsync(int id)
        {
            return await _context.ReceptionStatuses.FindAsync(id);
        }

        public async Task<ReceptionStatus> GetByStatusAsync(Domain.Status status)
        {
            return await _context.ReceptionStatuses.FirstOrDefaultAsync(rs => rs.Status == status);
        }

        public async Task AddAsync(ReceptionStatus receptionStatus)
        {
            await _context.ReceptionStatuses.AddAsync(receptionStatus);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateAsync(ReceptionStatus receptionStatus)
        {
            _context.ReceptionStatuses.Update(receptionStatus);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            var receptionStatus = await _context.ReceptionStatuses.FindAsync(id);
            if (receptionStatus != null)
            {
                _context.ReceptionStatuses.Remove(receptionStatus);
                await _context.SaveChangesAsync();
            }
        }
    }
}


FILE: DAL/UserRepository.cs
using Domain.Interfaces;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DAL
{
    public class UserRepository : IUserRepository
    {
        private readonly ApplicationContext _context;


        public UserRepository(ApplicationContext context)
        {
            _context = context;
        }

        public async Task<User> GetByEmail(string email)
        {
            return await _context.Users.FirstOrDefaultAsync(u => u.Email == email);
        }

        public async Task Create(User user)
        {
            _context.Users.Add(user);
            await _context.SaveChangesAsync();
        }
        public async Task<User> GetUserByIdAsync(int userId)
        {
            return await _context.Users.FindAsync(userId);
        }

        public async Task UpdateUserAsync(User user)
        {
            _context.Users.Update(user);
            await _context.SaveChangesAsync();
        }

        public Patient CreatePatient(Patient patient)
        {
            try
            {
                _context.Patients.Add(patient);
                _context.SaveChanges();
                return patient;
            }
            catch (Exception ex)
            {
                // Логирование или обработка ошибки
                throw new Exception("Ошибка при сохранении пациента: " + ex.InnerException?.Message, ex);
            }
        }
        public async Task<Patient> CreatePatientAsync(Patient patient)
        {
            var user = await _context.Users.FindAsync(patient.UserId);
            if (user == null)
            {
                throw new Exception($"Пользователь с идентификатором {patient.UserId} не найден.");
            }

            patient.User = user;
            _context.Patients.Add(patient);
            await _context.SaveChangesAsync();
            return patient;
        }
    }
}


FILE: Domain/Domain.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="BCrypt.Net-Next" Version="4.0.3" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.4" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.4" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.4" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="7.5.1" />
  </ItemGroup>

</Project>


FILE: Domain/Enums.cs
namespace Domain
{
    public enum HospitalType
    {
        Adult,
        Children,
        Specialized
    }
    public enum Gender
    {
        Male,
        Female
    }
    public enum RoleOfUser
    {
        Patient,
        Doctor,
        Admin
    }
    public enum Status
    {
        Completed,
        Waiting,
        Cancelled
    }
}


FILE: Domain/Interfaces/IDoctorRepository.cs
using Domain.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.Interfaces
{
    public interface IDoctorRepository
    {
        Task<List<Doctor>> GetAllAsync();
        Task<Doctor> GetByIdAsync(int id);
        Task AddAsync(Doctor doctor);
        Task UpdateAsync(Doctor doctor);
        Task DeleteAsync(int id);
        IEnumerable<Doctor> GetByHospitalId(int hospitalId);
        IEnumerable<Doctor> GetBySpecialtyAndHospitalId(int hospitalId, int specialtyId);
        Task<IEnumerable<Doctor>> GetBySpecialityAsync(int specialityId);
    }
}


FILE: Domain/Interfaces/IDoctorSpecialityRepository.cs
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.Interfaces
{
    public interface IDoctorsSpecialityRepository
    {
        Task<List<DoctorsSpeciality>> GetAllAsync();
        Task<DoctorsSpeciality> GetByIdAsync(int id);
        Task AddAsync(DoctorsSpeciality speciality);
        Task UpdateAsync(DoctorsSpeciality speciality);
        Task DeleteAsync(int id);
        IEnumerable<DoctorsSpeciality> GetByHospitalId(int hospitalId);
    }
}


FILE: Domain/Interfaces/IHospitalRepository.cs
using Domain.Models;
using Domain.ViewModels;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.Interfaces
{
    public interface IHospitalRepository
    {
        IEnumerable<Hospital> GetAll();
        Hospital GetById(int id);
        void Add(Hospital hospital);
        void Update(Hospital hospital);
        void Delete(int id);
        IEnumerable<Hospital> SearchHospitals(HospitalSearchParameters parameters);
    }


}


FILE: Domain/Interfaces/IMedicalAppointmentRepository.cs
using Domain.Models;
using Domain.ViewModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.Interfaces
{
    public interface IMedicalAppointmentRepository
    {
        Task<MedicalAppointment> CreateAsync(MedicalAppointment appointment);
        Task UpdateAsync(MedicalAppointment appointment);
        Task DeleteAsync(MedicalAppointment appointment);
        Task<MedicalAppointment> GetByIdAsync(int id);
        Task<IEnumerable<MedicalAppointmentDTO>> GetAllAsync(MedicalAppointmentSearchParameters parameters);
    }
}


FILE: Domain/Interfaces/IPatientRepository.cs
using Domain.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.Interfaces
{
    public interface IPatientRepository
    {
        Patient GetPatientByUserId(int userId);
        Patient UpdatePatient(Patient patient);
    }
}


FILE: Domain/Interfaces/IReceptionStatusRepository.cs
using Domain.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.Interfaces
{
    public interface IReceptionStatusRepository
    {
        Task<List<ReceptionStatus>> GetAllAsync();
        Task<ReceptionStatus> GetByIdAsync(int id);
        Task<ReceptionStatus> GetByStatusAsync(Domain.Status status);
        Task AddAsync(ReceptionStatus receptionStatus);
        Task UpdateAsync(ReceptionStatus receptionStatus);
        Task DeleteAsync(int id);
    }
}


FILE: Domain/Interfaces/IUserRepository.cs
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.Interfaces
{
    public interface IUserRepository
    {
        Task<User> GetByEmail(string email);
        Task Create(User user);

        Task<User> GetUserByIdAsync(int userId);
       
        Task UpdateUserAsync(User user);
        Task<Patient> CreatePatientAsync(Patient patient);
    }
}


FILE: Domain/Models/Doctor.cs
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;



namespace Domain.Models
{

    public class Doctor
    {
        [Key]
        public int DoctorId { get; set; }

        public int HospitalId { get; set; }
        public int DoctorsSpecialityId { get; set; }

        [Required]
        [StringLength(200)]
        public string FullName { get; set; }

        public string? Photo { get; set; }

        [Required]
        public string WorkingHours { get; set; }

        [StringLength(50)]
        public string Office { get; set; }

        [StringLength(1000)]
        public string AdditionalInfo { get; set; }

        [ForeignKey("DoctorsSpecialityId")]
        public virtual DoctorsSpeciality DoctorsSpeciality { get; set; }

        [ForeignKey("HospitalId")]
        public virtual Hospital Hospital { get; set; }

        public virtual ICollection<MedicalAppointment> MedicalAppointments { get; set; }
    }

}


FILE: Domain/Models/DoctorsSpeciality.cs

using System.ComponentModel.DataAnnotations;

namespace Domain.Models
{
    public class DoctorsSpeciality 
    {
        [Key]
        public int DoctorsSpecialityId { get; set; }

        [Required]
        [StringLength(200)]
        public string Name { get; set; }

        public virtual ICollection<Doctor> Doctors { get; set; }
    }
}


FILE: Domain/Models/Hospital.cs
using System.ComponentModel.DataAnnotations;

namespace Domain.Models
{
    public class Hospital 
    {
        [Key]
        public int HospitalId { get; set; }

        [Required]
        [StringLength(200)]
        public string Name { get; set; }

        [Required]
        [StringLength(500)]
        public string Address { get; set; }

        [Required]
        [StringLength(100)]
        public HospitalType Type { get; set; }

        [Required]
        public string WorkingHours { get; set; }

        [Required]
        [StringLength(100)]
        public string Phones { get; set; }

        [StringLength(100)]
        public string Email { get; set; }

        [StringLength(1000)]
        public string Description { get; set; }

        public virtual ICollection<Doctor> Doctors { get; set; }
        public virtual ICollection<MedicalAppointment> MedicalAppointments { get; set; }
    }
}


FILE: Domain/Models/MedicalAppointment.cs
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Numerics;



namespace Domain.Models
{
    public class MedicalAppointment 
    {
        [Key]
        public int MedicalAppointmentId { get; set; }

        public int HospitalId { get; set; }
        public int PatientId { get; set; }
        public int DoctorId { get; set; }
        public int ReceptionStatusId { get; set; }

        [Required]
        [Column(TypeName = "date")]
        public DateTime Date { get; set; }

        [Required]
        public TimeSpan Time { get; set; }

        public string TextResult { get; set; }

        [StringLength(500)]
        public string Description { get; set; }

        [ForeignKey("HospitalId")]
        public virtual Hospital Hospital { get; set; }

        [ForeignKey("PatientId")]
        public virtual Patient Patient { get; set; }

        [ForeignKey("DoctorId")]
        public virtual Doctor Doctor { get; set; }

        [ForeignKey("ReceptionStatusId")]
        public virtual ReceptionStatus ReceptionStatus { get; set; }
    }
}


FILE: Domain/Models/Patient.cs

using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace Domain.Models
{
    public class Patient 
    {
        public int PatientId { get; set; }
        public string Name { get; set; }
        /*        public string FirstName { get; set; }
                public string MiddleName { get; set; }*/
        public Gender Gender { get; set; }
        public DateTime DateOfBirth { get; set; }
        //public byte[] Photo { get; set; }
        //public string Email { get; set; }
        //public string City { get; set; }
        public string Address { get; set; }
        public int? UserId { get; set; }

        [JsonIgnore]
        public virtual User User { get; set; }
        /*  public int TerritorialClinicId { get; set; }
          public TerritorialClinic TerritorialClinic { get; set; }*/
    }

   
}


FILE: Domain/Models/ReceptionStatus.cs

using System.ComponentModel.DataAnnotations;

namespace Domain.Models
{
    public class ReceptionStatus 
    {
        [Key]
        public int ReceptionStatusId { get; set; }

        [Required]
        [Range(0, 2)]
        public Domain.Status  Status { get; set; }

        public virtual ICollection<MedicalAppointment> MedicalAppointments { get; set; }
    }
   
}


FILE: Domain/Models/User.cs


using System.ComponentModel.DataAnnotations.Schema;

namespace Domain.Models
{
    public class User 
    {
        public int UserId { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }
        public string Password { get; set; }
        public RoleOfUser Role { get; set; }
        public int? PatientId { get; set; }

        /*[ForeignKey("PatientId")]*/
        public virtual Patient Patient { get; set; }
    }
}


FILE: Domain/ViewModels/DoctorModel.cs
using Domain.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.ViewModels
{
    public class DoctorModel
    {
        public int HospitalId { get; set; }
        public int DoctorsSpecialityId { get; set; }
        public string FullName { get; set; }
        public string? Photo { get; set; }
        public string WorkingHours { get; set; }
        public string Office { get; set; }
        public string AdditionalInfo { get; set; }
    }
}


FILE: Domain/ViewModels/DoctorSpecialiyModel.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.ViewModels
{
    public class DoctorsSpecialityModel
    {
        public string Name { get; set; }
    }
}


FILE: Domain/ViewModels/HospitalModel.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.ViewModels
{
    public class HospitalModel
    {
        public string Name { get; set; }
        public string Address { get; set; }
        public HospitalType Type { get; set; }
        public string WorkingHours { get; set; }
        public string Phones { get; set; }
        public string Email { get; set; }
        public string Description { get; set; }
    }
}


FILE: Domain/ViewModels/HospitalSearchParameters.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.ViewModels
{
    public class HospitalSearchParameters
    {
        public IEnumerable<HospitalType>? HospitalTypes { get; set; }
        public string? Name { get; set; }
    }
}


FILE: Domain/ViewModels/LoginModel.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.ViewModels
{
    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }
    }
}


FILE: Domain/ViewModels/MedicalAppointmentDTO.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.ViewModels
{
    public class MedicalAppointmentDTO
    {
        public int Id { get; set; }
        public string HospitalName { get; set; }
        public string PatientName { get; set; }
        public string DoctorName { get; set; }
        public string DoctorSpecialty { get; set; }
        public string ReceptionStatus { get; set; }
        public string Description { get; set;}
    }
}


FILE: Domain/ViewModels/MedicalAppointmentModel.cs
using Domain.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.ViewModels
{
    public class MedicalAppointmentModel
    {

        public int HospitalId { get; set; }
        public int PatientId { get; set; }
        public int DoctorId { get; set; }
        public int ReceptionStatusId { get; set; }
        [Required]
        [Column(TypeName = "date")]
        public DateTime Date { get; set; }

        [Required]
        public TimeSpan Time { get; set; }

        public string TextResult { get; set; }

        [StringLength(500)]
        public string Description { get; set; }
    }

}


FILE: Domain/ViewModels/MedicalAppointmentSearchParameters.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.ViewModels
{
    public class MedicalAppointmentSearchParameters
    {
        public int? HospitalId { get; set; }
        public int? PatientId { get; set; }
        public int? DoctorId { get; set; }
        public int? ReceptionStatusId { get; set; }
        public DateTime? DateFrom { get; set; }
        public DateTime? DateTo { get; set; }
        public TimeSpan? TimeFrom { get; set; }
        public TimeSpan? TimeTo { get; set; }
    }
}


FILE: Domain/ViewModels/PatientModel.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.ViewModels
{
    public class PatientModel
    {
        public string Name { get; set; }
        public Gender Gender { get; set; }
        public DateTime DateOfBirth { get; set; }
        public string Address { get; set; }
    }
}


FILE: Domain/ViewModels/ReceptionStatusModel.cs
using Domain.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.ViewModels
{
    public class ReceptionStatusModel
    {

        [Required]
        [Range(0,2)]
        public Domain.Status Status { get; set; }

    }
}


FILE: Domain/ViewModels/RegisterModel.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.ViewModels
{
    public class RegisterModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        public string Phone { get; set; }

        [Required]
        [MinLength(6)]
        public string Password { get; set; }
    }

   
}


FILE: Domain/ViewModels/Result.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.ViewModels
{
    public class Result
    {
        public bool Succeeded { get; set; }
        public IEnumerable<string> Errors { get; set; }
    }

    public class LoginResult : Result
    {
        public string Token { get; set; }

    }
}


FILE: Domain/ViewModels/UpdateUserModel.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Domain.ViewModels
{
    public class UpdateUserModel
    {
        public string Email { get; set; }
        public string Phone { get; set; }
        // Добавьте другие поля, которые нужно обновить
    }
}


FILE: TalonBy/Controllers/AuthContorller.cs
using BLL.Services;
using Domain.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

namespace TalonBy.Controllers
{
    [ApiController]
    [Route("auth")]
    public class AuthController : ControllerBase
    {
        private readonly IAuthService _authService;

        public AuthController(IAuthService authService)
        {
            _authService = authService;
        }

        
        [HttpPost("register")]
        public async Task<IActionResult> Register(RegisterModel model)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var result = await _authService.Register(model);

            if (result.Succeeded)
            {
                return Ok();
            }

            return BadRequest(result.Errors);
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login(LoginModel model)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var result = await _authService.Login(model);

            if (result.Succeeded)
            {
                return Ok(new { Token = result.Token });
            }

            return Unauthorized();
        }
        [Authorize]
        [HttpGet("GetThisUser")]
        public async Task<IActionResult> GetUser()
        {
            int userId = GetCurrentUserId();
            var user = await _authService.GetUserByIdAsync(userId);
            return Ok(user);
        }
        [Authorize]
        [HttpPut("update")]
        public async Task<IActionResult> UpdateUser(UpdateUserModel model)
        {
            var userId = GetCurrentUserId();
            var user = await _authService.GetUserByIdAsync(userId);
            if (user == null)
                return NotFound();

            user.Email = model.Email;
            user.Phone = model.Phone;
            // Обновите другие поля пользователя

            await _authService.UpdateUserAsync(user);
            return Ok(user);
        }

        /*[HttpPost("logout")]
        public async Task<IActionResult> Logout()
        {
            *//*int userId = GetCurrentUserId();
            await _authService.LogoutAsync(userId);
            return NoContent();*//*
        }*/
        [Authorize]
        [HttpPost("CreatePatient")]
        public async Task<IActionResult> CreatePatient(PatientModel patientDto)
        {
            try
            {
                var userId = GetCurrentUserId();
                var patient = await _authService.CreatePatientAsync(patientDto, userId);
                return Ok(patient);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }
        [Authorize]
        private int GetCurrentUserId()
        {
            // Получаем идентификатор текущего пользователя из JWT токена
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            return int.Parse(userId);
        }
    }
}


FILE: TalonBy/Controllers/DoctorContoller.cs
using BLL.Services;
using Domain.Models;
using Domain.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.ComponentModel;

namespace TalonBy.Controllers
{
    // [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class DoctorController : ControllerBase
    {
        private readonly IDoctorService _doctorService;

        public DoctorController(IDoctorService doctorService)
        {
            _doctorService = doctorService;
        }

        [HttpGet("GetAll")]
        public async Task<IActionResult> GetAllDoctors()
        {
            var doctors = await _doctorService.GetAllDoctorsAsync();
            return Ok(doctors);
        }

        [HttpGet("GetById {id}")]
        public async Task<IActionResult> GetDoctorById(int id)
        {
            var doctor = await _doctorService.GetDoctorByIdAsync(id);
            if (doctor == null)
                return NotFound();

            return Ok(doctor);
        }
        [HttpGet("GetBySpeciality/{specialityId}")]
        public async Task<IActionResult> GetDoctorsBySpeciality(int specialityId)
        {
            try
            {
                var doctors = await _doctorService.GetDoctorsBySpecialityAsync(specialityId);
                return Ok(doctors);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpGet("GetByHospital/{hospitalId}")]
        public IActionResult GetDoctorsByHospital(int hospitalId)
        {
            try
            {
                var doctors = _doctorService.GetDoctorsByHospital(hospitalId);
                return Ok(doctors);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpGet("GetBySpecialtyAndHospital/{hospitalId}/{specialtyId}")]
        public IActionResult GetDoctorsBySpecialtyAndHospital(int hospitalId, int specialtyId)
        {
            try
            {
                var doctors = _doctorService.GetDoctorsBySpecialtyAndHospital(hospitalId, specialtyId);
                return Ok(doctors);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpPost("Create")]
        public async Task<IActionResult> CreateDoctor(DoctorModel doctorModel)
        {
            await _doctorService.CreateDoctorAsync(doctorModel);
            return Ok();
        }

        [HttpPut("Update {id}")]
        public async Task<IActionResult> UpdateDoctor(int id, DoctorModel doctorModel)
        {
            await _doctorService.UpdateDoctorAsync(id, doctorModel);
            return Ok();
        }

        [HttpDelete("Delete {id}")]
        public async Task<IActionResult> DeleteDoctor(int id)
        {
            await _doctorService.DeleteDoctorAsync(id);
            return Ok();
        }
    }
}


FILE: TalonBy/Controllers/DoctorSpecialityController.cs
using BLL.Services;
using Domain.Models;
using Domain.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace TalonBy.Controllers
{
    // [Authorize]  // Убираем этот атрибут для тестирования
    [ApiController]
    [Route("api/[controller]")]
    public class DoctorsSpecialityController : ControllerBase
    {
        private readonly IDoctorsSpecialityService _doctorsSpecialityService;
        private readonly IDoctorService _doctorService;

        public DoctorsSpecialityController(IDoctorsSpecialityService doctorsSpecialityService, IDoctorService doctorService)
        {
            _doctorsSpecialityService = doctorsSpecialityService;

        }

        [HttpGet("GetAll")]
        public async Task<IActionResult> GetAllDoctorsSpecialities()
        {
            var specialities = await _doctorsSpecialityService.GetAllDoctorsSpecialitiesAsync();
            return Ok(specialities);
        }

        [HttpGet("GetById {id}")]
        public async Task<IActionResult> GetDoctorsSpecialityById(int id)
        {
            var speciality = await _doctorsSpecialityService.GetDoctorsSpecialityByIdAsync(id);
            if (speciality == null)
                return NotFound();

            return Ok(speciality);
        }

        [HttpPost("Create")]
        public async Task<IActionResult> CreateDoctorsSpeciality(DoctorsSpecialityModel specialityModel)
        {
            var specialityId = await _doctorsSpecialityService.CreateDoctorsSpecialityAsync(specialityModel);
            return CreatedAtAction(nameof(GetDoctorsSpecialityById), new { id = specialityId }, specialityModel);
        }

        [HttpPut("Update {id}")]
        public async Task<IActionResult> UpdateDoctorsSpeciality(int id, DoctorsSpecialityModel specialityModel)
        {
            await _doctorsSpecialityService.UpdateDoctorsSpecialityAsync(id, specialityModel);
            return NoContent();
        }

        [HttpDelete("Delete {id}")]
        public async Task<IActionResult> DeleteDoctorsSpeciality(int id)
        {
            await _doctorsSpecialityService.DeleteDoctorsSpecialityAsync(id);
            return NoContent();
        }

        [HttpGet("GetByHospital/{hospitalId}")]
        public IActionResult GetByHospital(int hospitalId)
        {
            var specialities = _doctorsSpecialityService.GetSpecialitiesByHospital(hospitalId);
            return Ok(specialities);
        }
    }
}


FILE: TalonBy/Controllers/HospitalController.cs
using BLL.Services;
using Domain.Models;
using Domain.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace TalonBy.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class HospitalController : Controller
    {
        private IHospitalService hospitalService;
        private IDoctorService doctorService;

        public HospitalController(IHospitalService hospitalService, IDoctorService doctorService)
        {
            this.hospitalService = hospitalService;
            this.doctorService = doctorService;
        }

        [HttpGet("GetAllHospitals")]
        public List<Hospital> GetAllHospitals()
        {
            var hospitals = hospitalService.GetAllHospitals();
            return hospitals;
        }

        [HttpGet("GetById/{id}")]
        public IActionResult GetById(int id)
        {
            var hospital = hospitalService.GetById(id);
            if (hospital == null)
                return NotFound();

            return Ok(hospital);
        }

        [HttpPost("Create")]
        public IActionResult Add(HospitalModel hospitalDTO)
        {
            hospitalService.Add(hospitalDTO);
            return Ok();
        }

        [HttpPut("Update/{id}")]
        public IActionResult Update(HospitalModel hospitalModel, int id)
        {
            hospitalService.Update(hospitalModel, id);
            return Ok();
        }

        [HttpDelete("Delete/{id}")]
        public IActionResult Delete(int id)
        {
            hospitalService.Delete(id);
            return Ok();
        }

        [HttpGet("GetDoctorsByHospital/{hospitalId}")]
        public IActionResult GetDoctorsByHospital(int hospitalId)
        {
            var doctors = doctorService.GetDoctorsByHospital(hospitalId);
            return Ok(doctors);
        }

        [HttpGet("GetDoctorsBySpecialty/{hospitalId}/{specialtyId}")]
        public IActionResult GetDoctorsBySpecialty(int hospitalId, int specialtyId)
        {
            var doctors = doctorService.GetDoctorsBySpecialtyAndHospital(hospitalId, specialtyId);
            return Ok(doctors);
        }

        [HttpGet("SearchHospitals")]
        public IActionResult SearchHospitals([FromQuery] HospitalSearchParameters parameters)
        {
            var hospitals = hospitalService.SearchHospitals(parameters);
            return Ok(hospitals);
        }
    }
}


FILE: TalonBy/Controllers/MedicalAppointmentController.cs
using BLL.Services;
using Domain.Models;
using Domain.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace TalonBy.Controllers
{
    [ApiController]
    [Authorize]
    [Route("api/[controller]")]
    public class MedicalAppointmentController : ControllerBase
    {
        private readonly IMedicalAppointmentService _medicalAppointmentService;

        public MedicalAppointmentController(IMedicalAppointmentService medicalAppointmentService)
        {
            _medicalAppointmentService = medicalAppointmentService;
        }

        [HttpPost("Create")]
        public async Task<IActionResult> CreateMedicalAppointment(MedicalAppointmentModel model)
        {
            var appointment = await _medicalAppointmentService.CreateMedicalAppointmentAsync(model);
            return CreatedAtAction(nameof(GetMedicalAppointmentById), new { id = appointment.MedicalAppointmentId }, appointment);
        }

        [HttpPut("Update {id}")]
        public async Task<IActionResult> UpdateMedicalAppointment(int id, MedicalAppointmentModel model)
        {
            await _medicalAppointmentService.UpdateMedicalAppointmentAsync(id, model);
            return NoContent();
        }

        [HttpDelete("Delete {id}")]
        public async Task<IActionResult> DeleteMedicalAppointment(int id)
        {
            await _medicalAppointmentService.DeleteMedicalAppointmentAsync(id);
            return NoContent();
        }

        [HttpGet("GetById{id}")]
        public async Task<ActionResult<MedicalAppointment>> GetMedicalAppointmentById(int id)
        {
            var appointment = await _medicalAppointmentService.GetMedicalAppointmentByIdAsync(id);
            if (appointment == null)
                return NotFound();
            return appointment;
        }

        [HttpGet("GetByParameters")]
        public async Task<ActionResult<IEnumerable<MedicalAppointment>>> GetMedicalAppointments([FromQuery] MedicalAppointmentSearchParameters parameters)
        {
            var appointments = await _medicalAppointmentService.GetMedicalAppointmentsAsync(parameters);
            return Ok(appointments);
        }
    }
}


FILE: TalonBy/Controllers/PatientController.cs
using BLL.Services;
using Domain;
using Domain.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

namespace TalonBy.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class PatientController : ControllerBase
    {
        private readonly IPatientService _patientService;

        public PatientController(IPatientService patientService)
        {
            _patientService = patientService;
        }

        [HttpPut("UpdatePatient")]
        public IActionResult UpdatePatient(PatientModel patientUpdateModel)
        {
            try
            {
                var userId = GetCurrentUserId();
                var updatedPatient = _patientService.UpdatePatient(userId, patientUpdateModel);
                return Ok(updatedPatient);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        private int GetCurrentUserId()
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            return int.Parse(userId);
        }
        // Методы контроллера будут добавлены здесь
    }
}


FILE: TalonBy/Controllers/ReceptionsStatusConroller.cs
using BLL.Services;
using Domain.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace TalonBy.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class ReceptionStatusController : ControllerBase
    {
        private readonly IReceptionStatusService _receptionStatusService;

        public ReceptionStatusController(IReceptionStatusService receptionStatusService)
        {
            _receptionStatusService = receptionStatusService;
        }

        [HttpGet("GetAll")]
        public async Task<IActionResult> GetAllReceptionStatuses()
        {
            var receptionStatuses = await _receptionStatusService.GetAllReceptionStatusesAsync();
            return Ok(receptionStatuses);
        }

        [HttpGet("GetById{id}")]
        public async Task<IActionResult> GetReceptionStatusById(int id)
        {
            var receptionStatus = await _receptionStatusService.GetReceptionStatusByIdAsync(id);
            if (receptionStatus == null)
                return NotFound();

            return Ok(receptionStatus);
        }

        [HttpGet("GetByStatus {status}")]
        public async Task<IActionResult> GetReceptionStatusByStatus(Domain.Status status)
        {
            var receptionStatus = await _receptionStatusService.GetReceptionStatusByStatusAsync(status);
            if (receptionStatus == null)
                return NotFound();

            return Ok(receptionStatus);
        }

        [HttpPost("Create")]
        public async Task<IActionResult> CreateReceptionStatus(ReceptionStatusModel receptionStatusModel)
        {
            await _receptionStatusService.CreateReceptionStatusAsync(receptionStatusModel);
            return Ok();
        }

        [HttpPut("Update")]
        public async Task<IActionResult> UpdateReceptionStatus(ReceptionStatusModel receptionStatusModel)
        {
            try
            {
                await _receptionStatusService.UpdateReceptionStatusAsync(receptionStatusModel);
                return Ok();
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpDelete("Delete {id}")]
        public async Task<IActionResult> DeleteReceptionStatus(int id)
        {
            await _receptionStatusService.DeleteReceptionStatusAsync(id);
            return Ok();
        }
    }
}


FILE: TalonBy/Program.cs
using BLL.Services;
using DAL;
using Domain.Interfaces;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System.Security.Claims;
using System.Text;


namespace TalonBy
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Добавьте эту конфигурацию в начало
            builder.WebHost.UseUrls(

                "http://localhost:5297",    // Основной URL для API

                "https://localhost:7297",   // HTTPS URL для API

                "http://localhost:5298"     // Отдельный URL для Swagger

            );
            // Add services to the container.


            builder.Services.AddControllers()
                .AddJsonOptions(options =>
                {
                    options.JsonSerializerOptions.ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.Preserve;
                });
            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddCors(options =>
            {
                options.AddDefaultPolicy(
                    builder =>
                    {
                        builder.WithOrigins("http://localhost:4200")
                            .AllowAnyHeader()
                            .AllowAnyMethod();
                    });
            });
            builder.Services.AddSwaggerGen(c =>
            {
                // �������� ����������� ������������ ��� ������������� JWT-������
                c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    Description = "JWT Authorization header using the Bearer scheme.",
                    Type = SecuritySchemeType.Http,
                    Scheme = "bearer"
                });

                // �������� ���������� ������������ ��� ���� �������
                c.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = "Bearer"
                            }
                        },
                        new string[] {}
                    }
                });
            });


            builder.Services.AddDbContext<ApplicationContext>(options =>
                options.UseSqlServer(
                @"Server=(localdb)\mssqllocaldb;Database=TalonBy;Trusted_Connection=True;",
                x => x.MigrationsAssembly("DAL")));
            var config = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json")
                .Build();

            string issuer = config["Jwt:Issuer"];
            string audience = config["Jwt:Audience"];
            string key = config["Jwt:Key"];

            builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
               .AddJwtBearer(options =>
                   {
                       options.TokenValidationParameters = new TokenValidationParameters
                       {
                           ValidateIssuer = true,
                           ValidateAudience = true,
                           ValidateLifetime = true,
                           ValidateIssuerSigningKey = true,
                           ValidIssuer = issuer,
                           ValidAudience = audience,
                           RoleClaimType = ClaimTypes.Role,
                           IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(key))
                       };
                   });

            //bll
            builder.Services.AddTransient<IAuthService, AuthService>();
            builder.Services.AddScoped<IDoctorService, DoctorService>();
            builder.Services.AddTransient<IDoctorsSpecialityService, DoctorsSpecialityService>();
            builder.Services.AddTransient<IHospitalService, HospitalService>();
            builder.Services.AddTransient<IMedicalAppointmentService, MedicalAppointmentService>();
            builder.Services.AddTransient<IPatientService, PatientService>();
            builder.Services.AddTransient<IReceptionStatusService, ReceptionStatusService>();


            //dal
            builder.Services.AddTransient<IUserRepository, UserRepository>();
            builder.Services.AddScoped<IDoctorRepository, DoctorRepository>();
            builder.Services.AddTransient<IDoctorsSpecialityRepository, DoctorsSpecialityRepository>();
            builder.Services.AddTransient<IHospitalRepository, HospitalRepository>();
            builder.Services.AddTransient<IMedicalAppointmentRepository, MedicalAppointmentRepository>();
            builder.Services.AddTransient<IReceptionStatusRepository, ReceptionStatusRepository>();
            builder.Services.AddTransient<IPatientRepository, PatientRepository>();

          


            var app = builder.Build();
            app.UseCors();
            // Configure the HTTP request pipeline.
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI(c =>
                {
                    c.SwaggerEndpoint("/swagger/v1/swagger.json", "TalonBy API V1");
                });
            }
            else 
            {
                app.UseHttpsRedirection();
            }

            app.UseAuthentication();
            app.UseAuthorization();
            


            app.MapControllers();

            app.Run();
        }
    }
}


FILE: TalonBy/Properties/launchSettings.json
{
  "$schema": "https://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:5297",
      "sslPort": 7297
    }
  },
  "profiles": {
    "TalonBy.API": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "launchUrl": "swagger",
      "applicationUrl": "http://localhost:5297;https://localhost:7297",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "TalonBy.Swagger": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "http://localhost:5298",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}


FILE: TalonBy/TalonBy.csproj
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="BCrypt.Net-Next" Version="4.0.3" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.4" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.4" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.4" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Portable.BouncyCastle" Version="1.9.0" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.4.0" />
    <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="7.5.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\BLL\BLL.csproj" />
    <ProjectReference Include="..\DAL\DAL.csproj" />
    <ProjectReference Include="..\Domain\Domain.csproj" />
  </ItemGroup>

</Project>


FILE: TalonBy/TalonBy.sln

Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.9.34701.34
MinimumVisualStudioVersion = 10.0.40219.1
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "TalonBy", "TalonBy.csproj", "{2CECB9D2-D306-49D0-9E16-5DC0ABB45E5D}"
	ProjectSection(ProjectDependencies) = postProject
		{01A72E3B-7D90-43AB-A4AB-32EB21A08B0A} = {01A72E3B-7D90-43AB-A4AB-32EB21A08B0A}
	EndProjectSection
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Domain", "..\Domain\Domain.csproj", "{D1B7E26E-F908-4518-AA16-8E2E40A8DA24}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "BLL", "..\BLL\BLL.csproj", "{01A72E3B-7D90-43AB-A4AB-32EB21A08B0A}"
	ProjectSection(ProjectDependencies) = postProject
		{D1B7E26E-F908-4518-AA16-8E2E40A8DA24} = {D1B7E26E-F908-4518-AA16-8E2E40A8DA24}
	EndProjectSection
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "DAL", "..\DAL\DAL.csproj", "{2F2269F7-DF4B-45BC-BDCA-FE012DC88E71}"
	ProjectSection(ProjectDependencies) = postProject
		{D1B7E26E-F908-4518-AA16-8E2E40A8DA24} = {D1B7E26E-F908-4518-AA16-8E2E40A8DA24}
	EndProjectSection
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{2CECB9D2-D306-49D0-9E16-5DC0ABB45E5D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{2CECB9D2-D306-49D0-9E16-5DC0ABB45E5D}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{2CECB9D2-D306-49D0-9E16-5DC0ABB45E5D}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{2CECB9D2-D306-49D0-9E16-5DC0ABB45E5D}.Release|Any CPU.Build.0 = Release|Any CPU
		{D1B7E26E-F908-4518-AA16-8E2E40A8DA24}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{D1B7E26E-F908-4518-AA16-8E2E40A8DA24}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{D1B7E26E-F908-4518-AA16-8E2E40A8DA24}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{D1B7E26E-F908-4518-AA16-8E2E40A8DA24}.Release|Any CPU.Build.0 = Release|Any CPU
		{01A72E3B-7D90-43AB-A4AB-32EB21A08B0A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{01A72E3B-7D90-43AB-A4AB-32EB21A08B0A}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{01A72E3B-7D90-43AB-A4AB-32EB21A08B0A}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{01A72E3B-7D90-43AB-A4AB-32EB21A08B0A}.Release|Any CPU.Build.0 = Release|Any CPU
		{2F2269F7-DF4B-45BC-BDCA-FE012DC88E71}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{2F2269F7-DF4B-45BC-BDCA-FE012DC88E71}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{2F2269F7-DF4B-45BC-BDCA-FE012DC88E71}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{2F2269F7-DF4B-45BC-BDCA-FE012DC88E71}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {C95A94FA-EE2F-4CDF-BB22-85F6948F322B}
	EndGlobalSection
EndGlobal


FILE: TalonBy/appsettings.Development.json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}


FILE: TalonBy/appsettings.json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "Jwt": {
    "Key": "dQ4t7w9z$C&F)J@NcRfUjXn2r5u8x/A?D(G+KbPeShVmYq3s6v9y$B&E)H@M",
    "Issuer": "https://localhost:7013",
    "Audience": "https://localhost:7013"
  }
}


FILE: TalonByAngular/.vscode/extensions.json
{
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=827846
  "recommendations": ["angular.ng-template"]
}


FILE: TalonByAngular/.vscode/launch.json
{
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "name": "ng serve",
      "type": "chrome",
      "request": "launch",
      "preLaunchTask": "npm: start",
      "url": "http://localhost:4200/"
    },
    {
      "name": "ng test",
      "type": "chrome",
      "request": "launch",
      "preLaunchTask": "npm: test",
      "url": "http://localhost:9876/debug.html"
    }
  ]
}


FILE: TalonByAngular/.vscode/settings.json
{
  "cSpell.words": ["Добавьте"]
}


FILE: TalonByAngular/.vscode/tasks.json
{
  // For more information, visit: https://go.microsoft.com/fwlink/?LinkId=733558
  "version": "2.0.0",
  "tasks": [
    {
      "type": "npm",
      "script": "start",
      "isBackground": true,
      "problemMatcher": {
        "owner": "typescript",
        "pattern": "$tsc",
        "background": {
          "activeOnStart": true,
          "beginsPattern": {
            "regexp": "(.*?)"
          },
          "endsPattern": {
            "regexp": "bundle generation complete"
          }
        }
      }
    },
    {
      "type": "npm",
      "script": "test",
      "isBackground": true,
      "problemMatcher": {
        "owner": "typescript",
        "pattern": "$tsc",
        "background": {
          "activeOnStart": true,
          "beginsPattern": {
            "regexp": "(.*?)"
          },
          "endsPattern": {
            "regexp": "bundle generation complete"
          }
        }
      }
    }
  ]
}


FILE: TalonByAngular/README.md
# TalonByAngular

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 17.3.7.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The application will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.io/cli) page.


FILE: TalonByAngular/angular.json
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "TalonByAngular": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "style": "scss"
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/talon-by-angular",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "inlineStyleLanguage": "scss",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.scss"
            ],
            "scripts": []
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "TalonByAngular:build:production"
            },
            "development": {
              "buildTarget": "TalonByAngular:build:development"
            }
          },
          "defaultConfiguration": "development",
          "options": {
            "ssl": false
          }
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "buildTarget": "TalonByAngular:build"
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "inlineStyleLanguage": "scss",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.scss"
            ],
            "scripts": []
          }
        }
      }
    }
  }
}


FILE: TalonByAngular/package.json
{
  "name": "talon-by-angular",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^17.3.0",
    "@angular/cdk": "^17.3.9",
    "@angular/common": "^17.3.12",
    "@angular/compiler": "^17.3.0",
    "@angular/core": "^17.3.0",
    "@angular/forms": "^17.3.0",
    "@angular/material": "^17.3.9",
    "@angular/platform-browser": "^17.3.0",
    "@angular/platform-browser-dynamic": "^17.3.0",
    "@angular/router": "^17.3.0",
    "jwt-decode": "^4.0.0",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.14.3"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^17.3.7",
    "@angular/cli": "^17.3.7",
    "@angular/compiler-cli": "^17.3.0",
    "@types/jasmine": "~5.1.0",
    "jasmine-core": "~5.1.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.4.2"
  }
}


FILE: TalonByAngular/proxy.conf.json
{
  "/api": {
    "target": "https://localhost:5001",
    "secure": false,
    "changeOrigin": true
  }
} 


FILE: TalonByAngular/src/app/app.component.html
<app-header *ngIf="!isLoginOrRegisterPage()"></app-header>
<router-outlet></router-outlet>
<app-footer *ngIf="!isLoginOrRegisterPage()"></app-footer>

<!-- footer -->


FILE: TalonByAngular/src/app/app.component.scss
// @import "~@angular/material/prebuilt-themes/indigo-pink.css";
:host {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  margin-top: 80px;
  
  router-outlet + * {
    flex: 1;
    background-color: var(--background-color);
    padding: 20px 0;
  }
}


FILE: TalonByAngular/src/app/app.component.spec.ts
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'TalonByAngular' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('TalonByAngular');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain(
      'Hello, TalonByAngular'
    );
  });
});


FILE: TalonByAngular/src/app/app.component.ts
import { Component } from '@angular/core';
import { NavigationEnd, Router, RouterOutlet } from '@angular/router';

import { RegisterComponent } from './modules/register/register.component';
import { LoginComponent } from './modules/login/login.component';
import { HeaderComponent } from './modules/header/header.component';
import { CommonModule } from '@angular/common';
import { filter } from 'rxjs';
import { FooterComponent } from './modules/footer/footer.component';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    RouterOutlet,
    RegisterComponent,
    LoginComponent,
    HeaderComponent,
    FooterComponent,
    CommonModule
  ],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss'],
})
export class AppComponent {
  title = 'TalonByAngular';
  private readonly excludedRoutes = ['/login', '/register'];

  constructor(private router: Router) {}

  ngOnInit() {
    this.router.events
      .pipe(filter((event) => event instanceof NavigationEnd))
      .subscribe(() => {
        // Дополнительная логика, если необходимо
      });
  }

  isLoginOrRegisterPage(): boolean {
    return this.excludedRoutes.includes(this.router.url);
  }
}


FILE: TalonByAngular/src/app/app.config.ts
import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
// import { provideClientHydration } from '@angular/platform-browser';
import { provideHttpClient } from '@angular/common/http';
import { provideAnimations } from '@angular/platform-browser/animations';

import { routes } from './app.routes';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes),
    provideHttpClient(),
    provideAnimations()
  ],
};


FILE: TalonByAngular/src/app/app.routes.ts
import { Routes } from '@angular/router';
import { LoginComponent } from './modules/login/login.component';
import { RegisterComponent } from './modules/register/register.component';
import { MainPageComponent } from './modules/main-page/main-page.component';
import { PaidServicesComponent } from './modules/paid-services/paid-services.component';
import { MedicalInstitutionsComponent } from './modules/medical-institutions/medical-institutions.component';
import { AnalysesComponent } from './modules/analyses/analyses.component';
import { MedicinesComponent } from './modules/medicines/medicines.component';
import { BlogComponent } from './modules/blog/blog.component';

export const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: 'register', component: RegisterComponent },
  { path: 'main', component: MainPageComponent },
  { 
    path: 'order', 
    loadChildren: () => import('./modules/order/order.module').then(m => m.OrderModule)
  },
  { path: 'paid-services', component: PaidServicesComponent },
  { path: 'medical-institutions', component: MedicalInstitutionsComponent },
  { path: 'analyses', component: AnalysesComponent },
  { path: 'medicines', component: MedicinesComponent },
  { path: 'blog', component: BlogComponent },
  { path: '', redirectTo: '/main', pathMatch: 'full' },
];


FILE: TalonByAngular/src/app/interfaces/order.interface.ts
export enum HospitalType {
  Adult = 0,
  Children = 1,
  Specialized = 2
}

export interface Hospital {
  $id?: string;
  hospitalId: number;
  name: string;
  address: string;
  type: HospitalType;
  workingHours: string;
  phones: string;
  email: string;
  website?: string;
  description: string;
  doctors?: any[];
  medicalAppointments?: any[];
}

export interface Department {
  id: number;
  name: string;
}

export interface Doctor {
  id: number;
  name: string;
  specialityId: number;
  schedule?: {
    start: string;
    end: string;
  };
}

export interface TimeSlot {
  id: number;
  startTime: string;
  isAvailable: boolean;
}

export interface Appointment {
  id: number;
  createdAt: string;
  patientId: number;
  hospitalId: number;
  departmentId: number;
  doctorId: number;
  timeSlotId: number;
  status: string;
}

export interface Speciality {
  doctorsSpecialityId: number;
  name: string;
  link: string;
  description?: string;
}

export interface DoctorDetails {
  doctorId: number;
  hospitalId: number;
  doctorsSpecialityId: number;
  fullName: string;
  photo?: string;
  workingHours: string;
  office: string;
  additionalInfo?: string;
  doctorsSpeciality?: {
    name: string;
  };
} 


FILE: TalonByAngular/src/app/modules/analyses/analyses.component.html
<p>analyses works!</p>


FILE: TalonByAngular/src/app/modules/analyses/analyses.component.scss


FILE: TalonByAngular/src/app/modules/analyses/analyses.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AnalysesComponent } from './analyses.component';

describe('AnalysesComponent', () => {
  let component: AnalysesComponent;
  let fixture: ComponentFixture<AnalysesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AnalysesComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(AnalysesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


FILE: TalonByAngular/src/app/modules/analyses/analyses.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-analyses',
  standalone: true,
  imports: [],
  templateUrl: './analyses.component.html',
  styleUrl: './analyses.component.scss'
})
export class AnalysesComponent {

}


FILE: TalonByAngular/src/app/modules/blog/blog.component.html
<p>blog works!</p>


FILE: TalonByAngular/src/app/modules/blog/blog.component.scss


FILE: TalonByAngular/src/app/modules/blog/blog.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { BlogComponent } from './blog.component';

describe('BlogComponent', () => {
  let component: BlogComponent;
  let fixture: ComponentFixture<BlogComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [BlogComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(BlogComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


FILE: TalonByAngular/src/app/modules/blog/blog.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-blog',
  standalone: true,
  imports: [],
  templateUrl: './blog.component.html',
  styleUrl: './blog.component.scss'
})
export class BlogComponent {

}


FILE: TalonByAngular/src/app/modules/footer/footer.component.html
<footer>
  <div class="wrapper">
    <div class="footer">
      <div class="left">
        <ul id="footMenu">
          <li class="footMenuItem"><a routerLink="/about">О проекте</a></li>
          <li class="footMenuItem">
            <a routerLink="/faq" class="openHelp">Помощь</a>
            <span class="development-note"><br/>(в разработке)</span>
          </li>
          <li class="footMenuItem"><a routerLink="/login/policlinic">Вход для медучреждений</a></li>
          <li class="footMenuItem"><a href="https://b2b.talon.by" target="_blank">Подключиться</a></li>
        </ul>
        
        <div class="social-links-block">
          <p>Наши соцсети</p>
          <div class="social-links">
            <a class="social-link social-link-vk" target="_blank" href="https://vk.com/talon_by">
              VK
            </a>
            <a class="social-link social-link-telegram" target="_blank" href="https://t.me/talonby">
              <span class="icon site-icon site-icon-social-telegram"></span>
            </a>
            <a class="social-link social-link-viber" target="_blank" href="https://invite.viber.com/?g2=AQAOJTVUYsMBGUtPFI9JRcEKZaAzVBshYdy%2BhPthptW%2FdwxVN5IhD8iRfq%2FVx5aN">
              <span class="icon site-icon site-icon-social-viber"></span>
            </a>
          </div>
        </div>
        
        <div class="footer-extra-links">
          <div class="footer-extra-link-items">
            <div class="footer-extra-link-item">
              <a routerLink="/terms" class="footer-extra-link">Пользовательское соглашение</a>
            </div>
            <div class="footer-extra-link-item">
              <a routerLink="/legal-docs" class="footer-extra-link">Документы</a>
            </div>
          </div>
        </div>
      </div>

      <div class="right">
        <a href="/faq" id="openFeedback" class="tui-button tui-button-outline tui-button-small">
          Написать в поддержку <span class="development-note"><br/>(в разработке)</span>
        </a>
        <p class="copyright-text">
          © <a href="http://www.mapsoft.by/" target="_blank" rel="noopener noreferrer">ООО «DES»</a>, 
          2010-{{currentYear}}<br> Все права защищены
        </p>
      </div>
    </div>
  </div>
</footer> 


FILE: TalonByAngular/src/app/modules/footer/footer.component.scss
footer {
  background: #fff;
  padding: 40px 0;
  border-top: 1px solid #E0E0E0;
  margin-top: auto;
}

.wrapper {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

.footer {
  display: flex;
  justify-content: space-between;
  
  .left {
    order: 1;
    #footMenu {
      list-style: none;
      padding: 0;
      margin: 0 0 30px;
      display: flex;
      gap: 24px;
      
      .footMenuItem {
        a {
          color: #333;
          text-decoration: none;
          font-size: 16px;
          
          &:hover {
            color: #FF5722;
          }
        }
      }
    }
    
    .social-links-block {
      margin-bottom: 30px;
      
      p {
        margin: 0 0 12px;
        color: #666;
      }
      
      .social-links {
        display: flex;
        gap: 12px;
        
        .social-link {
          display: flex;
          align-items: center;
          justify-content: center;
          width: 36px;
          height: 36px;
          border-radius: 50%;
          background: #F5F5F5;
          text-decoration: none;
          transition: all 0.3s ease;
          
          &-vk {
            font-size: 14px;
            font-weight: 700;
            color: #FF5722;
          }
          
          .icon {
            width: 20px;
            height: 20px;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
          }
          
          &:hover {
            background: #FF5722;
            
            &.social-link-vk {
              color: #FFFFFF;
            }
            
            .icon {
              filter: brightness(0) invert(1);
            }
          }
        }
      }
    }
    
    .footer-extra-links {
      .footer-extra-link-items {
        display: flex;
        gap: 24px;
        
        .footer-extra-link {
          color: #666;
          text-decoration: none;
          font-size: 14px;
          
          &:hover {
            color: #FF5722;
          }
        }
      }
    }
  }
  
  .right {
    order: 2;
    margin-left: 40px;
    text-align: right;
    
    .tui-button {
      display: inline-block;
      padding: 8px 16px;
      color: #FF5722;
      border: 1px solid #FF5722;
      border-radius: 4px;
      text-decoration: none;
      margin-bottom: 20px;
      transition: all 0.3s ease;
      
      &:hover {
        background: rgba(255, 87, 34, 0.1);
      }
    }
    
    .copyright-text {
      color: #666;
      font-size: 14px;
      line-height: 1.5;
      
      a {
        color: #666;
        text-decoration: none;
        
        &:hover {
          color: #FF5722;
        }
      }
    }
  }
}

.development-note {
  color: #999;
  font-size: 12px;
  margin-left: 4px;
}

.site-icon {
  &-social-vk {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="%23FF5722" d="M20,12c0-5.5-4.5-10-10-10S0,6.5,0,12s4.5,10,10,10s10-4.5,10-10H20z M10.7,14.8l-0.4-0.6c-0.4-0.6-0.8-1.1-1.2-1.6 c-0.4-0.5-0.7-0.9-1-1.2c-0.3-0.3-0.5-0.5-0.7-0.7c-0.2-0.2-0.3-0.3-0.4-0.4L6.5,9.9V9.3c0-0.2,0-0.3,0.1-0.4c0.1-0.1,0.2-0.2,0.3-0.2 c0.1,0,0.2,0,0.3,0.1c0.1,0.1,0.2,0.2,0.3,0.3l1.2,1.6l0.4,0.6c0.4,0.6,0.8,1.1,1.2,1.6c0.4,0.5,0.7,0.9,1,1.2c0.3,0.3,0.5,0.5,0.7,0.7 c0.2,0.2,0.3,0.3,0.4,0.4l0.3,0.3v0.6c0,0.2,0,0.3-0.1,0.4c-0.1,0.1-0.2,0.2-0.3,0.2c-0.1,0-0.2,0-0.3-0.1C11.3,15.4,11,15.1,10.7,14.8z"/></svg>');
  }
  &-social-telegram {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="%23FF5722" d="M9.78,18.65L10.06,14.42L17.74,7.5C18.08,7.19 17.67,7.04 17.22,7.31L7.74,13.3L3.64,12C2.76,11.75 2.75,11.14 3.84,10.7L19.81,4.54C20.54,4.21 21.24,4.72 20.96,5.84L18.24,18.65C18.05,19.56 17.5,19.78 16.74,19.36L12.6,16.3L10.61,18.23C10.38,18.46 10.19,18.65 9.78,18.65Z"/></svg>');
  }
  &-social-viber {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="%23FF5722" d="M12,2C6.5,2,2,6.5,2,12c0,5.5,4.5,10,10,10s10-4.5,10-10C22,6.5,17.5,2,12,2z M16.9,15.7c-0.3,0.8-1.9,1.7-2.6,1.7 c-0.7,0-1.4-0.3-2.1-0.6c-1.2-0.5-2.3-1.3-3.2-2.2c-0.9-0.9-1.7-2-2.2-3.2c-0.3-0.7-0.6-1.4-0.6-2.1c0-0.7,0.9-2.3,1.7-2.6 c0.8-0.3,1.5,0.2,1.9,0.9c0.4,0.7,0.8,1.4,1.2,2.1c0.4,0.7,0,1.3-0.4,1.8c-0.4,0.5-0.8,0.9-1.2,1.4c0.8,1.5,2,2.7,3.5,3.5 c0.5-0.4,0.9-0.8,1.4-1.2c0.5-0.4,1.1-0.8,1.8-0.4c0.7,0.4,1.4,0.8,2.1,1.2C16.7,14.2,17.2,14.9,16.9,15.7z"/></svg>');
  }
}

.social-links {
  display: flex;
  gap: 12px;
  
  .social-link {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background: #F5F5F5;
    text-decoration: none;
    transition: all 0.3s ease;
    
    &-vk {
      font-size: 14px;
      font-weight: 700;
      color: #FF5722;
    }
    
    &:hover {
      background: #FF5722;
      
      &.social-link-vk {
        color: #FFFFFF;
      }
      
      .icon {
        filter: brightness(0) invert(1);
      }
    }
  }
}

@media (max-width: 768px) {
  footer {
    padding: 24px 0;
  }

  .footer {
    flex-direction: column;
    gap: 24px;
    
    .left {
      order: 1;
      
      #footMenu {
        flex-direction: column;
        gap: 16px;
        margin-bottom: 24px;
      }
      
      .social-links-block {
        margin-bottom: 24px;
      }
      
      .footer-extra-links {
        margin-bottom: 24px;
        
        .footer-extra-link-items {
          flex-direction: column;
          gap: 16px;
          
          .footer-extra-link {
            display: block;
            padding: 8px 0;
            font-size: 16px;
          }
        }
      }
    }
    
    .right {
      order: 2;
      margin-left: 0;
      text-align: left;
      border-top: 1px solid #E0E0E0;
      padding-top: 24px;
      
      .tui-button {
        width: 70%;
        text-align: center;
        margin-bottom: 24px;
        padding: 12px;
        font-size: 16px;
      }
      
      .copyright-text {
        font-size: 14px;
        line-height: 1.5;
      }
    }
  }
} 


FILE: TalonByAngular/src/app/modules/footer/footer.component.ts
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';

@Component({
  selector: 'app-footer',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './footer.component.html',
  styleUrls: ['./footer.component.scss']
})
export class FooterComponent {
  currentYear = new Date().getFullYear();
} 


FILE: TalonByAngular/src/app/modules/header/header.component.html
<header>
  <div class="wrapper">
    <a class="logo" routerLink="/">ТалонBy</a>
    
    <nav class="menu-container">
      <ul class="header-menu">
        <li><a routerLink="/order">Талоны</a></li>
        <li><a routerLink="/paid-services">Платные услуги</a></li>
        <li><a routerLink="/medical-institutions">Медучреждения</a></li>
        <li><a routerLink="/analyses">Анализы</a></li>
        <li><a routerLink="/medicines">Лекарства</a></li>
        <li><a routerLink="/blog">Блог</a></li>
      </ul>
    </nav>

    <div class="right">
      <button class="burger-menu" (click)="toggleMenu()">
        <span></span>
        <span></span>
        <span></span>
      </button>
      <a routerLink="/login" class="login-link">Войти</a>
    </div>
  </div>

  <!-- Мобильное меню -->
  <div class="mobile-menu" [class.active]="isMenuOpen">
    <nav>
      <ul>
        <li><a routerLink="/order">Талоны</a></li>
        <li><a routerLink="/paid-services">Платные услуги</a></li>
        <li><a routerLink="/medical-institutions">Медучреждения</a></li>
        <li><a routerLink="/analyses">Анализы</a></li>
        <li><a routerLink="/medicines">Лекарства</a></li>
        <li><a routerLink="/blog">Блог</a></li>
        <li><a routerLink="/blog">Тест</a></li>
      </ul>
    </nav>
  </div>
</header>


FILE: TalonByAngular/src/app/modules/header/header.component.scss
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap");

header {
  background: #fff;
  border-bottom: 1px solid #E0E0E0;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  height: 80px;
}

// Добавляем новый контейнер для всей шапки
.header-container {
  padding: 0 20px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  height: 80px;
}

// Контейнер для центрального меню
.wrapper {
  position: relative;
  max-width: 1200px;
  width: 100%;
  height: 80px;
  margin: 0 auto;
  display: flex;
  justify-content: center;
  align-items: center;
}

// Позиционируем лого и кнопку относительно viewport
.logo {
  position: fixed;
  left: calc((100vw - 1200px) / 2 - 120px);
  font-size: clamp(28px, 5vw, 36px);
  font-weight: 700;
  color: #FF5722;
  text-decoration: none;
  transition: color 0.3s ease;
  white-space: nowrap;
  z-index: 1001;
  
  &:hover {
    color: #FF7043;
  }
}

.menu-container {
  display: flex;
  align-items: center;
  padding: 0 120px;
}

.region-selector {
  margin-right: 32px;
  
  .region-value {
    cursor: pointer;
    padding: 8px 12px;
    border-radius: 4px;
    transition: background-color 0.3s ease;
    
    &:hover {
      background-color: #F5F5F5;
    }
    
    .region-text {
      color: #333;
      font-size: 14px;
      font-weight: 500;
    }
  }
}

.header-menu {
  display: flex;
  list-style: none;
  margin: 0;
  padding: 0;
  gap: 32px;
  
  li {
    a {
      color: #333;
      text-decoration: none;
      font-size: clamp(12.8px, 1.6vw, 16px);
      font-weight: 500;
      padding: 8px 0;
      transition: color 0.3s ease;
      white-space: nowrap;
      
      &:hover {
        color: #FF5722;
      }
    }
  }
}

// Позиционирование кнопки "Войти"
.right {
  position: fixed;
  right: 20px;
  z-index: 1001;
  
  .login-link {
    color: #FF5722;
    text-decoration: none;
    font-size: 18px;
    font-weight: 500;
    padding: 8px 16px;
    border-radius: 4px;
    transition: background-color 0.3s ease;
    white-space: nowrap;
    
    &:hover {
      background-color: rgba(255, 87, 34, 0.1);
    }
  }
}

// Бургер-меню
.burger-menu {
  display: none;
  flex-direction: column;
  justify-content: space-between;
  width: 30px;
  height: 20px;
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
  z-index: 1001;
  position: fixed;
  right: 20px;
  
  span {
    display: block;
    width: 100%;
    height: 2px;
    background-color: #333;
    transition: all 0.3s ease;
  }
}

// Мобильное меню
.mobile-menu {
  display: none;
  position: fixed;
  top: 80px;
  left: 0;
  right: 0;
  background: #fff;
  padding: 20px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  transform: translateY(-100%);
  transition: transform 0.3s ease;
  z-index: 1000;
  
  &.active {
    transform: translateY(0);
  }
  
  ul {
    list-style: none;
    margin: 0;
    padding: 0;
    
    li {
      margin: 16px 0;
      text-align: center;
      
      a {
        color: #333;
        text-decoration: none;
        font-size: 18px;
        font-weight: 500;
        display: block;
        padding: 8px 0;
        
        &:hover {
          color: #FF5722;
        }
      }
    }
  }
}

// Адаптивность
@media (max-width: 1440px) {
  .logo {
    left: 20px;
  }
  
  .right {
    right: 30px;
  }
  
  .menu-container {
    padding: 0 80px;
  }
}

@media (max-width: 950px) {
  .menu-container {
    display: none !important;
  }
  
  .header-menu {
    display: none !important;
  }
  
  .wrapper {
    justify-content: space-between;
  }
  
  .burger-menu {
    display: flex;
  }
  
  .mobile-menu {
    display: none;
    
    &.active {
      display: block;
      transform: translateY(0);
      
      ul {
        opacity: 1;
        visibility: visible;
      }
    }
  }
  
  .right {
    .login-link {
      margin-right: 40px;
    }
  }
}

@media (max-width: 768px) {
  header {
    height: 64px;
  }
  
  .logo {
    font-size: 24px;
  }
  
  .burger-menu {
    right: 20px;
  }
  
  .right {
    .login-link {
      margin-right: 35px;
    }
  }
  
  .mobile-menu {
    top: 64px;
  }
}

@media (max-width: 480px) {
  .burger-menu {
    right: 20px;
  }
  
  .right {
    .login-link {
      margin-right: 30px;
    }
  }
}


FILE: TalonByAngular/src/app/modules/header/header.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HeaderComponent } from './header.component';

describe('HeaderComponent', () => {
  let component: HeaderComponent;
  let fixture: ComponentFixture<HeaderComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [HeaderComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(HeaderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


FILE: TalonByAngular/src/app/modules/header/header.component.ts
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.scss']
})
export class HeaderComponent {
  isMenuOpen = false;

  toggleMenu(): void {
    this.isMenuOpen = !this.isMenuOpen;
  }
}


FILE: TalonByAngular/src/app/modules/login/auth.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private apiUrl = 'http://localhost:5297/auth/login'; // Обновленный URL

  constructor(private http: HttpClient) {}

  login(email: string, password: string): Observable<any> {
    const loginData = { email, password };
    return this.http.post<any>(`${this.apiUrl}`, loginData);
  }

  saveToken(token: string): void {
    localStorage.setItem('token', token);
  }

  saveRoles(roles: string[]): void {
    localStorage.setItem('roles', JSON.stringify(roles));
  }

  getToken(): string | null {
    return localStorage.getItem('token');
  }

  getRoles(): string[] | null {
    const rolesString = localStorage.getItem('roles');
    return rolesString ? JSON.parse(rolesString) : null;
  }

  isLoggedIn(): boolean {
    const token = this.getToken();
    return token !== null;
  }
}


FILE: TalonByAngular/src/app/modules/login/login.component.html
<!-- login.component.html -->
<div class="background">
  <div class="shape"></div>
  <div class="shape"></div>
</div>
<form [formGroup]="loginForm" (ngSubmit)="login()">
  <h3>Вход</h3>

  <label for="email">Email</label>
  <input
    type="email"
    placeholder="Email"
    id="email"
    formControlName="email"
    required
  />
  <div
    *ngIf="email.invalid && (email.dirty || email.touched)"
    class="error-message"
  >
    <div *ngIf="email.errors?.['required']">Email обязателен.</div>
    <div *ngIf="email.errors?.['email']">Введите корректный email.</div>
  </div>

  <label for="password">Пароль</label>
  <input
    type="password"
    placeholder="Пароль"
    id="password"
    formControlName="password"
    required
  />
  <div
    *ngIf="password.invalid && (password.dirty || password.touched)"
    class="error-message"
  >
    <div *ngIf="password.errors?.['required']">Пароль обязателен.</div>
    <div *ngIf="password.errors?.['minlength']">
      Пароль должен содержать не менее 6 символов.
    </div>
  </div>

  <div *ngIf="errorMessage" class="error-message">{{ errorMessage }}</div>

  <button type="submit" [disabled]="loginForm.invalid">Войти</button>
</form>


FILE: TalonByAngular/src/app/modules/login/login.component.scss
/* login.component.scss */
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;600&display=swap");

:host {
  display: flex;
  justify-content: center;
  align-items: center;
}

*,
*:before,
*:after {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}
body {
  background-color: #080710;
}
.background {
  width: 430px;
  height: 520px;
  position: absolute;
  transform: translate(-50%, -50%);
  left: 50%;
  top: 50%;
}

.background .shape {
  height: 200px;
  width: 200px;
  position: absolute;
  border-radius: 50%;
}

.shape:first-child {
  background: linear-gradient(#1845ad, #23a2f6);
  left: -80px;
  top: -80px;
}

.shape:last-child {
  background: linear-gradient(to right, #ff512f, #f09819);
  right: -30px;
  bottom: -80px;
}

form {
  height: 520px;
  width: 400px;
  background-color: rgba(255, 255, 255, 0.13);
  position: absolute;
  transform: translate(-50%, -50%);
  top: 50%;
  left: 50%;
  border-radius: 10px;
  backdrop-filter: blur(10px);
  border: 2px solid rgba(255, 255, 255, 0.1);
  box-shadow: 0 0 40px rgba(8, 7, 16, 0.6);
  padding: 50px 35px;
}

form * {
  font-family: "Poppins", sans-serif;
  color: #080710;
  letter-spacing: 0.5px;
  outline: none;
  border: none;
}

form h3 {
  font-size: 32px;
  font-weight: 500;
  line-height: 42px;
  text-align: center;
}

label {
  display: block;
  margin-top: 30px;
  font-size: 16px;
  font-weight: 500;
}

input {
  display: block;
  height: 50px;
  width: 100%;
  background-color: rgba(255, 255, 255, 0.07);
  border-radius: 3px;
  padding: 0 10px;
  margin-top: 8px;
  font-size: 14px;
  font-weight: 300;
  color: #080710;
}

::placeholder {
  color: #a9a9a9;
}

button {
  margin-top: 50px;
  width: 100%;
  background-color: #ffffff;
  color: #080710;
  padding: 15px 0;
  font-size: 18px;
  font-weight: 600;
  border-radius: 5px;
  cursor: pointer;
}

.error-message {
  color: #ff4d4d;
  margin-top: 5px;
  font-size: 14px;
}


FILE: TalonByAngular/src/app/modules/login/login.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LoginComponent } from './login.component';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [LoginComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


FILE: TalonByAngular/src/app/modules/login/login.component.ts
import { Component } from '@angular/core';
import { AuthService } from './auth.service';

import { Router, RouterModule } from '@angular/router';
import { catchError } from 'rxjs/operators';
import { throwError } from 'rxjs';
import {
  FormControl,
  FormGroup,
  FormsModule,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [FormsModule, ReactiveFormsModule, RouterModule, CommonModule],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss'],
})
export class LoginComponent {
  loginForm: FormGroup;
  errorMessage: string = '';

  constructor(private authService: AuthService, private router: Router) {
    this.loginForm = new FormGroup({
      email: new FormControl('', [Validators.required, Validators.email]),
      password: new FormControl('', [
        Validators.required,
        Validators.minLength(6),
      ]),
    });
  }

  get email(): FormControl {
    return this.loginForm.get('email') as FormControl;
  }

  get password(): FormControl {
    return this.loginForm.get('password') as FormControl;
  }

  login(): void {
    if (this.loginForm.valid) {
      this.authService
        .login(this.email.value, this.password.value)
        .pipe(
          catchError((error) => {
            this.errorMessage = 'Ошибка при логине: ' + error.message;
            return throwError(error);
          })
        )
        .subscribe((response) => {
          if (response && response.token) {
            this.authService.saveToken(response.token);
            this.authService.saveRoles(response.roles);
            // Перенаправляем пользователя на главную страницу
            this.router.navigate(['/main']);
          }
        });
    }
  }
}


FILE: TalonByAngular/src/app/modules/main-page/main-page.component.html
<div class="wrapper">
  <div class="grid2">
    <div class="home-section">
      <h1 class="main-page-title">
        Запись к врачам в 325 поликлиниках и медцентрах по всей Беларуси
      </h1>

      <div class="home-search-bar">
        <form class="formSearch" (submit)="onSearch()">
          <input type="text" [(ngModel)]="searchQuery" name="search" class="search" placeholder="Поиск по сайту">
          <button type="submit"></button>
        </form>
      </div>
    </div>

    <!-- Медицинский блог -->
    <div class="home-section blog-section">
      <div class="home-section-header">
        <div class="title-iconized">
          <div class="title-icon">
            <div class="home-icon home-icon-white">
              <span class="site-icon site-icon-home-blog"></span>
            </div>
          </div>
          <div class="title-content">Медицинский блог</div>
          <div class="title-actions">
            <a href="https://blog.talon.by/" class="title-action">
              <span class="title-action-text">Читать</span>
            </a>
          </div>
        </div>
      </div>

      <div class="blog-entries">
        <a *ngFor="let post of blogPosts" [href]="'https://blog.talon.by/article/' + post.url" class="blog-entry">
          <div class="blog-entry-media">
            <img [src]="post.image" [alt]="post.title">
          </div>
          <div class="blog-entry-details">
            <div class="blog-entry-author">{{ post.author }}</div>
            <div class="blog-entry-title">{{ post.title }}</div>
            <div class="blog-entry-metainfo">
              <div class="blog-entry-metainfo-views">
                <span class="site-icon site-icon-view-small"></span>&nbsp;{{ post.views }}
              </div>
            </div>
          </div>
        </a>
      </div>
    </div>

    <!-- Сервисные плитки -->
    <div class="home-section">
      <div class="home-tiles">
        <div class="home-tiles-items">
          <ng-container *ngFor="let service of mainServices">
            <a [href]="service.route" class="home-tile" [class.home-tile-outline]="service.type === 'outline'" [class.home-tile-fill]="service.type === 'fill'">
              <div class="home-tile-header">
                <div class="title-iconized">
                  <div class="title-icon">
                    <div class="home-icon" [class.home-icon-white]="service.type === 'outline'" [class.home-icon-accented]="service.type === 'fill'">
                      <span class="site-icon" [class]="service.icon"></span>
                    </div>
                  </div>
                  <div class="title-content">{{ service.title }}</div>
                </div>
              </div>
              <div class="home-tile-body">{{ service.description }}</div>
              <div *ngIf="service.action" class="home-tile-footer">
                <span class="home-tile-footer-action">{{ service.action }}</span>
              </div>
            </a>
          </ng-container>
        </div>
      </div>
    </div>
  </div>
</div>


FILE: TalonByAngular/src/app/modules/main-page/main-page.component.scss
:host {
  // Иконка блога
  .site-icon-home-blog {
    width: 24px;
    height: 24px;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="%23FF5722" d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/></svg>');
  }

  // Иконка медучреждений
  .site-icon-home-medcenters {
    width: 24px;
    height: 24px;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="%23FF5722" d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/></svg>');
  }

  // Иконка платных услуг
  .site-icon-home-paid-services {
    width: 24px;
    height: 24px;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="%23FF5722" d="M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4z"/></svg>');
  }

  // Иконка анализов
  .site-icon-home-medtests {
    width: 24px;
    height: 24px;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="%23FFFFFF" d="M7 2v2h1v14c0 2.21 1.79 4 4 4s4-1.79 4-4V4h1V2H7zm4 14c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm2-4c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm1-5h-4V4h4v3z"/></svg>');
  }

  // Иконка лекарств
  .site-icon-home-leki {
    width: 24px;
    height: 24px;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="%23FFFFFF" d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-8.5 14h-3v-3h3v3zm0-5h-3V9h3v3zm5 5h-3v-3h3v3zm0-5h-3V9h3v3z"/></svg>');
  }
}

.wrapper {
  max-width: 960px;
  margin: 0 auto;
  padding: 0 20px;
}

.grid2 {
  margin: 40px 0;
}

// Заголовок и поиск
.home-section {
  margin-bottom: 40px;
}

.main-page-title {
  font-size: 25.6px;
  line-height: 1.2;
  color: #333;
  margin: 0 0 20px;
  font-weight: 700;
  display: block;
}

.home-search-bar {
  max-width: 100%;
  margin: 0 auto;
  
  .formSearch {
    position: relative;
    width: 100%;
    
    input.search {
      width: 100%;
      height: 48px;
      padding: 0 48px 0 16px;
      border: 1px solid #E0E0E0;
      border-radius: 4px;
      font-size: 16px;
      box-sizing: border-box;
      
      &::placeholder {
        color: #999;
      }
      
      &:focus {
        outline: none;
        border-color: #FF5722;
      }
    }
    
    button {
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      width: 24px;
      height: 24px;
      border: none;
      background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="%23999" d="M15.5 14h-.79l-.28-.27a6.5 6.5 0 1 0-.7.7l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0A4.5 4.5 0 1 1 14 9.5 4.5 4.5 0 0 1 9.5 14z"/></svg>') center no-repeat;
      cursor: pointer;
    }
  }
}

// Медицинский блог
.blog-section {
  .home-section-header {
    margin-bottom: 24px;
  }
  
  .title-iconized {
    display: flex;
    align-items: center;
    
    .title-icon {
      margin-right: 12px;
      
      .home-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        
        &.home-icon-white {
          background: #FFF;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
      }
    }
    
    .title-content {
      font-size: 24px;
      color: #333;
      flex-grow: 1;
    }
    
    .title-actions {
      .title-action {
        color: #FF5722;
        text-decoration: none;
        font-weight: 500;
        
        &::after {
          content: ' →';
        }
        
        &:hover {
          text-decoration: underline;
        }
      }
    }
  }
}

.blog-entries {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
  
  .blog-entry {
    text-decoration: none;
    background: #FFF;
    border-radius: 4px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
    border: 2px solid rgba(255, 87, 34, 0);
    
    &:hover {
      border-color: rgba(255, 87, 34, 0.5);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    
    .blog-entry-media {
      img {
        width: 100%;
        height: 200px;
        object-fit: cover;
      }
    }
    
    .blog-entry-details {
      padding: 16px;
      
      .blog-entry-author {
        color: #666;
        font-size: 14px;
        margin-bottom: 8px;
      }
      
      .blog-entry-title {
        color: #333;
        font-size: 16px;
        line-height: 1.4;
        margin-bottom: 12px;
        font-weight: 500;
      }
      
      .blog-entry-metainfo {
        color: #999;
        font-size: 14px;
        
        .blog-entry-metainfo-views {
          display: flex;
          align-items: center;
          
          .site-icon-view-small {
            width: 16px;
            height: 16px;
            margin-right: 4px;
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill="%23999" d="M8 3C4.4 3 1.3 5.1 0 8c1.3 2.9 4.4 5 8 5s6.7-2.1 8-5c-1.3-2.9-4.4-5-8-5zm0 8.3c-1.8 0-3.3-1.5-3.3-3.3S6.2 4.7 8 4.7s3.3 1.5 3.3 3.3S9.8 11.3 8 11.3z"/></svg>') center no-repeat;
          }
        }
      }
    }
  }
}

// Сервисные плитки
.home-tiles {
  .home-tiles-items {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
  }
  
  .home-tile {
    text-decoration: none;
    padding: 36px;
    border-radius: 4px;
    transition: all 0.3s ease;
    min-height: 200px;
    border: 2px solid rgba(255, 87, 34, 0);
    
    &:hover {
      border-color: rgba(255, 87, 34, 0.5);
      
      .home-icon {
        transform: translateY(-2px);
        filter: brightness(1.1);
        
        &.home-icon-white {
          box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        
        &.home-icon-accented {
          background: #ff6e40;
        }
      }
    }
    
    &.home-tile-outline {
      background: #FFF;
      border: 2px solid #E0E0E0;
      
      &:hover {
        border-color: #FF5722;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      }
    }
    
    &.home-tile-fill {
      background: #FAFAFA;
      border: 2px solid #FAFAFA;
      
      &:hover {
        border-color: #FF5722;
        background: #FAFAFA;
      }
    }
    
    .home-tile-header {
      .title-iconized {
        display: flex;
        align-items: center;
        
        .home-icon {
          width: 48px;
          height: 48px;
          margin-right: 16px;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          
          &.home-icon-white {
            background: #FFF;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          }
          
          &.home-icon-accented {
            background: #FF5722;
          }

          .site-icon {
            width: 24px;
            height: 24px;
            display: block;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
          }
        }
        
        .title-content {
          font-size: clamp(1.7rem, 1.8vw, 1.8rem);
          color: #333;
          font-weight: 800;
          line-height: 1.3;
        }
      }
    }
    
    .home-tile-body {
      margin-top: 1.25rem;
      font-size: 1.3rem;
      line-height: 1.6;
      color: #666;
    }
    
    .home-tile-footer {
      margin-top: 1.5rem;
      
      .home-tile-footer-action {
        font-size: clamp(1rem, 1.25vw, 1.125rem);
        color: #FF5722;
        font-weight: 500;
        
        &::after {
          content: ' →';
        }
      }
    }
  }
}

// Адаптивность
@media (max-width: 992px) {
  .blog-entries {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 1400px) {
  .home-tile {
    padding: clamp(1.5rem, 3vw, 2.25rem);
  }
}

@media (max-width: 1200px) {
  .home-tiles {
    .home-tiles-items {
      gap: 1rem;
    }
  }
}

@media (max-width: 768px) {
  .main-page-title {
    font-size: 24px;
  }
  
  .home-tiles {
    .home-tiles-items {
      grid-template-columns: 1fr;
    }
  }
  
  .blog-entries {
    grid-template-columns: 1fr;
  }
  
  .home-tile {
    .home-tile-header {
      .title-iconized {
        .title-content {
          font-size: 1.8rem;
        }
      }
    }
    
    .home-tile-body {
      font-size: 2.4rem;
      line-height: 1.3;
      margin-bottom: 1.5rem;
      color: #333;
    }
    
    .home-tile-footer {
      .home-tile-footer-action {
        font-size: 1.4rem;
      }
    }
  }
  
  .home-tiles {
    .home-tiles-items {
      gap: 1.5rem;
      
      .home-tile {
        padding: 1.5rem;
      }
    }
  }
}


FILE: TalonByAngular/src/app/modules/main-page/main-page.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { MainPageComponent } from './main-page.component';

describe('MainPageComponent', () => {
  let component: MainPageComponent;
  let fixture: ComponentFixture<MainPageComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [MainPageComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(MainPageComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


FILE: TalonByAngular/src/app/modules/main-page/main-page.component.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { AuthService } from '../login/auth.service';

interface BlogPost {
  author: string;
  title: string;
  views: number;
  image: string;
  url: string;
}

@Component({
  selector: 'app-main-page',
  standalone: true,
  imports: [CommonModule, RouterModule, FormsModule],
  templateUrl: './main-page.component.html',
  styleUrls: ['./main-page.component.scss']
})
export class MainPageComponent implements OnInit {
  searchQuery: string = '';
  blogPosts: BlogPost[] = [
    {
      author: 'Александр Дубовик',
      title: 'Как ретинол возвращает молодость коже',
      views: 4969,
      image: 'https://blog.talon.by/files/articles/retinoid-1416588781a907251e7f7fd47f3fbceb-1ddeb1443decf95cc18ec61b7875489e-thumb-960x960.jpg',
      url: 'retinoidy-molekuly-vashej-molodosti'
    },
    {
      author: 'Анастасия Шунто',
      title: 'Это не менструация! Какие болезни вызывают маточное кровотечение?',
      views: 5018,
      image: 'https://blog.talon.by/files/articles/krovotechenie-5ad38d752473f9b7f1bc6cae7b3d4527-7d889d2096c90f7725330cf68a6998f2-thumb-960x960.jpg',
      url: 'eto-ne-menstruaciya'
    },
    {
      author: 'Александр Дубовик',
      title: 'Коварный, опасный и самый ужасный острый панкреатит',
      views: 6483,
      image: 'https://blog.talon.by/files/articles/kovarnyj-opasnyj-i-samyj-uzhasnyj-ostryj-pankreatit-4cbbd2f08fb5ad44fa139f26ea9fa02a-eeb13e5e1fdf6bf9fb022af21737240d-thumb-960x960.jpg',
      url: 'kovarnyj-opasnyj-i-samyj-uzhasnyj-ostryj-pankreatit'
    }
  ];

  mainServices = [
    {
      title: 'Все медучреждения',
      description: 'Прямая запись к врачам в поликлиниках прямо на сайте!',
      icon: 'site-icon-home-medcenters',
      route: '/policlinics',
      type: 'outline'
    },
    {
      title: 'Платные услуги',
      description: 'Запись к врачам государственных и частных медучреждений.',
      icon: 'site-icon-home-paid-services',
      route: '/services',
      type: 'outline'
    },
    {
      title: 'Запись на анализы',
      description: 'Экономьте время при сдаче анализов в «Хеликс» — заказывайте их прямо у нас на сайте.',
      icon: 'site-icon-home-medtests',
      route: '/analyses',
      type: 'fill',
      action: 'Заказать анализы'
    },
    {
      title: 'Поиск лекарств',
      description: 'Поиск лекарств в аптеках Минска, карта с аптеками и инструкции к препаратам.',
      icon: 'site-icon-home-leki',
      route: '/medicines',
      type: 'fill',
      action: 'Найти лекарства'
    }
  ];

  constructor(private authService: AuthService) {}

  ngOnInit(): void {}

  onSearch(): void {
    console.log('Поиск:', this.searchQuery);
  }
}


FILE: TalonByAngular/src/app/modules/medical-institutions/medical-institutions.component.html
<p>medical-institutions works!</p>


FILE: TalonByAngular/src/app/modules/medical-institutions/medical-institutions.component.scss


FILE: TalonByAngular/src/app/modules/medical-institutions/medical-institutions.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { MedicalInstitutionsComponent } from './medical-institutions.component';

describe('MedicalInstitutionsComponent', () => {
  let component: MedicalInstitutionsComponent;
  let fixture: ComponentFixture<MedicalInstitutionsComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [MedicalInstitutionsComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(MedicalInstitutionsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


FILE: TalonByAngular/src/app/modules/medical-institutions/medical-institutions.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-medical-institutions',
  standalone: true,
  imports: [],
  templateUrl: './medical-institutions.component.html',
  styleUrl: './medical-institutions.component.scss'
})
export class MedicalInstitutionsComponent {

}


FILE: TalonByAngular/src/app/modules/medicines/medicines.component.html
<p>medicines works!</p>


FILE: TalonByAngular/src/app/modules/medicines/medicines.component.scss


FILE: TalonByAngular/src/app/modules/medicines/medicines.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { MedicinesComponent } from './medicines.component';

describe('MedicinesComponent', () => {
  let component: MedicinesComponent;
  let fixture: ComponentFixture<MedicinesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [MedicinesComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(MedicinesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


FILE: TalonByAngular/src/app/modules/medicines/medicines.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-medicines',
  standalone: true,
  imports: [],
  templateUrl: './medicines.component.html',
  styleUrl: './medicines.component.scss'
})
export class MedicinesComponent {

}


FILE: TalonByAngular/src/app/modules/order/datetime-selection/datetime-selection-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { DatetimeSelectionComponent } from './datetime-selection.component';

const routes: Routes = [
  { path: '', component: DatetimeSelectionComponent }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class DatetimeSelectionRoutingModule { } 


FILE: TalonByAngular/src/app/modules/order/datetime-selection/datetime-selection.component.html
<div class="speciality-page">
  <!-- Мобильное меню -->
  <div class="mobile-details" *ngIf="isMobile">
    <div class="mobile-header" (click)="toggleDetails()">
      <h1>{{hospital?.name}}</h1>
      <span class="toggle-btn">
        {{isDetailsOpen ? '‹ Скрыть' : 'Показать подробнее ›'}}
      </span>
    </div>

    <div class="mobile-content" [class.open]="isDetailsOpen">
      <div class="info-grid">
        <div class="address-block">
          <p>{{hospital?.address}}</p>
          <a href="#" class="map-link">показать на карте</a>
        </div>
        <div class="registry-block">
          <div class="phones">
            <ng-container *ngFor="let item of getPhones()">
              <span *ngIf="item.isLabel" class="label">{{item.text}}</span>
              <a *ngIf="!item.isLabel" href="tel:{{item.text}}">{{item.text}}</a>
            </ng-container>
          </div>
        </div>
        <div class="schedule-block">
          <div class="schedule-row">
            <span class="label">ПН-ПТ:</span>{{getWorkingHours('ПН-ПТ')}}
          </div>
          <div class="schedule-row">
            <span class="label">СБ:</span>{{getWorkingHours('СБ')}}
          </div>
        </div>
        <div class="contacts-block">
          <a *ngIf="hospital?.website" href="{{hospital?.website}}" class="website">{{getDomain(hospital?.website)}}</a>
          <a *ngIf="hospital?.email" href="mailto:{{hospital?.email}}" class="email">{{hospital?.email}}</a>
        </div>
      </div>
    </div>
  </div>

  <!-- Десктопная версия -->
  <div class="hospital-header">
    <div class="wrapper">
      <div class="hospital-info">
        <h1>{{hospital?.name}}</h1>
        <div class="info-grid">
          <div class="address-block">
            <p>{{hospital?.address}}</p>
            <a href="#" class="map-link">показать на карте</a>
          </div>
          <div class="registry-block">
            <div class="phones">
              <ng-container *ngFor="let item of getPhones()">
                <span *ngIf="item.isLabel" class="label">{{item.text}}</span>
                <a *ngIf="!item.isLabel" href="tel:{{item.text}}">{{item.text}}</a>
              </ng-container>
            </div>
          </div>
          <div class="schedule-block">
            <div class="schedule-row">
              <span class="label">ПН-ПТ:</span>{{getWorkingHours('ПН-ПТ')}}
            </div>
            <div class="schedule-row">
              <span class="label">СБ:</span>{{getWorkingHours('СБ')}}
            </div>
          </div>
          <div class="contacts-block">
            <a *ngIf="hospital?.website" href="{{hospital?.website}}" class="website">{{getDomain(hospital?.website)}}</a>
            <a *ngIf="hospital?.email" href="mailto:{{hospital?.email}}" class="email">{{hospital?.email}}</a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="content-block">
    <div class="wrapper">
      <aside>
        <div class="order-steps">
          <div class="step completed" (click)="goToSpeciality()">Специальность</div>
          <div class="step completed" (click)="goToDoctor()">Врач</div>
          <div class="step active">Дата и время</div>
          <div class="step">Личные данные</div>
          <div class="step">Запись</div>
        </div>

        <nav class="hospital-nav">
          <ul>
            <li><a href="#">Информация</a></li>
            <li><a href="#">Врачи</a></li>
            <li><a href="#">Расписание врачей</a></li>
          </ul>
        </nav>
      </aside>

      <main>
        <h2>Заказ талона</h2>
        <p class="subtitle">Выбор даты и времени</p>

        <div class="calendar-wrapper">
          <div class="calendar-header">
            <button class="month-nav" 
                    (click)="prevMonth()" 
                    [disabled]="!canGoToPrevMonth()"
                    [class.disabled]="!canGoToPrevMonth()">&lt;</button>
            <h3>{{ months[currentMonth.getMonth()] }} {{ currentMonth.getFullYear() }}</h3>
            <button class="month-nav" 
                    (click)="nextMonth()" 
                    [disabled]="!canGoToNextMonth()"
                    [class.disabled]="!canGoToNextMonth()">&gt;</button>
          </div>

          <div class="calendar">
            <div class="weekdays">
              <div class="weekday" *ngFor="let day of weekDays">{{day}}</div>
            </div>
            
            <div class="calendar-grid">
              <div class="week" *ngFor="let week of calendar">
                <div class="day" *ngFor="let day of week" 
                     [class.weekend]="day.isWeekend"
                     [class.disabled]="day.isDisabled"
                     [class.today]="day.isToday"
                     [class.selected]="selectedDate && day.date === selectedDate.getDate() && 
                                    day.month === selectedDate.getMonth() && 
                                    day.year === selectedDate.getFullYear()"
                     (click)="selectDate(day)">
                  <span class="date">{{day.date || ''}}</span>
                  <span class="slots" *ngIf="day.date && !day.isDisabled">
                    {{day.availableSlots}}
                  </span>
                </div>
              </div>

              <div class="time-slots-row" *ngIf="selectedDate" [@slideInOut]>
                <div class="selected-date">
                  {{ selectedDate | date:'d MMMM' }}, {{ getDayOfWeek(selectedDate) }}
                </div>
                <div class="time-slots">
                  <button class="time-slot" *ngFor="let time of firstShiftSlots">{{ time }}</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  </div>
</div>


FILE: TalonByAngular/src/app/modules/order/datetime-selection/datetime-selection.component.scss
.speciality-page {
  background: #f5f5f5;

  .hospital-header {
    background: #fafafa;
    padding: 20px 0;
    border-bottom: 1px solid #eee;

    .wrapper {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;

      .hospital-info {
        h1 {
          font-size: 31px;
          font-weight: 700;
          color: #333;
          margin-bottom: 10px;
          margin-top: 0;
        }

        .info-grid {
          display: grid;
          grid-template-columns: 
            minmax(150px, 250px)
            minmax(100px, 140px)
            minmax(100px, 140px)
            minmax(120px, 180px);
          gap: 20px;
          align-items: start;

          .address-block {
            p {
              color: #333;
              margin-bottom: 2px;
              font-size: 13px;
            }

            .map-link {
              color: #FF5722;
              text-decoration: none;
              font-size: 12px;
              
              &:hover {
                text-decoration: underline;
              }
            }
          }

          .registry-block {
            .phones {
              display: flex;
              flex-direction: column;
              gap: 4px;
              
              .label {
                color: #333;
                font-weight: 600;
                font-size: 13px;
              }

              a {
                color: #FF5722;
                text-decoration: none;
                font-size: 13px;
                
                &:hover {
                  text-decoration: underline;
                }
              }
            }
          }

          .schedule-block {
            .schedule-row {
              font-size: 13px;
              margin-bottom: 1px;

              .label {
                color: #333;
                font-weight: 600;
                margin-right: 4px;
              }
            }
          }

          .contacts-block {
            a {
              display: block;
              color: #FF5722;
              text-decoration: none;
              font-size: 13px;
              margin-bottom: 1px;
              
              &:hover {
                text-decoration: underline;
              }
            }
          }
        }
      }
    }
  }

  .content-block {
    .wrapper {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      display: grid;
      grid-template-columns: 250px 1fr;
      gap: 30px;

      @media (max-width: 1200px) {
        padding: 15px;
      }

      aside {
        .order-steps {
          background: #fff;
          padding: 20px;
          border-radius: 8px;
          margin-bottom: 30px;

          .step {
            padding: 12px 15px;
            color: #999;
            font-size: 15px;
            position: relative;

            &.completed {
              color: #333;
              cursor: pointer;
              font-weight: 500;
              
              &:hover {
                color: #FF5722;
              }
            }
            
            &.active {
              color: #FF5722;
              font-weight: 500;
              background: rgba(255,87,34,0.05);
              border-radius: 4px;

              &::before {
                content: '';
                position: absolute;
                left: 0;
                top: 0;
                bottom: 0;
                width: 3px;
                background: #FF5722;
                border-radius: 0 2px 2px 0;
              }
            }
          }
        }

        .hospital-nav {
          ul {
            list-style: none;
            padding: 0;
            margin: 0;

            li {
              margin-bottom: 4px;

              a {
                display: block;
                padding: 12px 15px;
                color: #333;
                text-decoration: none;
                font-size: 15px;

                &:hover {
                  color: #FF5722;
                }
              }
            }
          }
        }
      }

      main {
        h2 {
          font-size: 24px;
          font-weight: 500;
          color: #333;
          margin: 0;
          margin-bottom: 8px;
        }

        .subtitle {
          color: #666;
          margin-bottom: 25px;
          font-size: 15px;
        }
      }
    }
  }

  // Стили для календаря
  .calendar-wrapper {
    background: #fff;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    width: calc(100% - 10px);
    margin-right: 10px;

    .calendar-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;

      h3 {
        font-size: 18px;
        margin: 0;
        color: #333;
      }

      .month-nav {
        background: none;
        border: none;
        font-size: 20px;
        color: #666;
        cursor: pointer;
        padding: 5px 10px;

        &:hover {
          color: #FF5722;
        }

        &.disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }
      }
    }

    .calendar {
      .weekdays {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        margin-bottom: 10px;

        .weekday {
          text-align: center;
          font-size: 14px;
          color: #666;
          text-transform: uppercase;
          padding: 5px;

          &:last-child,
          &:nth-last-child(2) {
            color: #FF5722;
          }
        }
      }

      .calendar-grid {
        .week {
          display: grid;
          grid-template-columns: repeat(7, 1fr);
          border-bottom: 2px solid rgba(200, 200, 200, 0.5);

          &:last-child {
            border-bottom: none;
          }
        }

        .day {
          aspect-ratio: 1;
          padding: 8px;
          border-right: 2px solid rgba(200, 200, 200, 0.5);
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          transition: background-color 0.2s;

          &:last-child {
            border-right: none;
          }

          &:not(.disabled):hover {
            background-color: rgba(255,87,34,0.05);
          }

          &.weekend {
            .date {
              color: #FF5722;
            }
          }

          &.disabled {
            opacity: 0.5;
            cursor: not-allowed;
            background: #fafafa;
          }

          &.selected {
            background-color: rgba(255,87,34,0.05);
            position: relative;

            &::after {
              content: '';
              position: absolute;
              left: 0;
              top: 0;
              bottom: 0;
              width: 3px;
              background: #FF5722;
            }
          }

          .date {
            font-size: 16px;
            font-weight: 500;
            margin-bottom: 4px;
          }

          .slots {
            font-size: 12px;
            color: #FF5722;
          }
        }

        .time-slots {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
          gap: 1px;
          background: rgba(238, 238, 238, 0.3);
          padding: 1px;
          border-radius: 4px;
          overflow: hidden;
        }

        .time-slots-row {
          grid-column: 1 / -1;
          border-top: 1px solid #eee;
          padding: 15px;

          .selected-date {
            font-size: 14px;
            color: #666;
            margin-bottom: 15px;
          }

          .time-slots {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
            gap: 1.5px;
            background: rgba(200, 200, 200, 0.3);
            padding: 1.5px;

            .time-slot {
              background: #fff;
              border: none;
              padding: 8px;
              color: #333;
              font-size: 13px;
              cursor: pointer;
              transition: all 0.2s;
              aspect-ratio: 1;
              display: flex;
              align-items: center;
              justify-content: center;

              &:hover {
                color: #FF5722;
              }

              &.selected {
                background: #FF5722;
                color: white;
              }
            }
          }
        }
      }
    }
  }
}

// Мобильные стили
.mobile-details {
  display: none;
}

@media (max-width: 768px) {
  .hospital-header {
    display: none;
  }

  .mobile-details {
    display: block;
    background: #fff;
    margin-bottom: 15px;

    .mobile-header {
      padding: 15px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;

      h1 {
        font-size: 18px;
        margin: 0;
        color: #333;
      }

      .toggle-btn {
        color: #FF5722;
        font-size: 14px;
      }
    }

    .mobile-content {
      height: 0;
      overflow: hidden;
      transition: height 0.3s ease;

      &.open {
        height: auto;
        padding: 0 15px 15px;
      }

      .info-grid {
        display: flex;
        flex-direction: column;
        gap: 15px;
      }
    }
  }

  .content-block {
    width: 100%;
    
    .wrapper {
      display: block;
      padding: 15px;
      width: 100%;
      max-width: 100%;

      aside {
        display: none;
      }

      main {
        width: 100%;
        padding: 0;

        .calendar-wrapper {
          width: 100vw;
          margin-left: calc(-15px);
          margin-right: 0;
          padding: 15px;
          border-radius: 0;
          box-sizing: border-box;
          
          .calendar {
            width: 100%;
            
            .weekdays {
              display: grid;
              grid-template-columns: repeat(7, 1fr);
              gap: 4px;
            }
            
            .calendar-grid {
              .week {
                display: grid;
                grid-template-columns: repeat(7, 1fr);
                gap: 4px;
              }
              
              .day {
                min-height: 45px;
                padding: 4px;
                width: 100%;
                
                .date {
                  font-size: 14px;
                }
                
                .slots {
                  font-size: 12px;
                }
              }
            }
          }
        }
      }
    }
  }
}

@media (max-width: 480px) {
  .calendar-wrapper {
    .calendar {
      .calendar-grid {
        .day {
          min-height: 35px;
          
          .date {
            font-size: 13px;
          }
          
          .slots {
            font-size: 11px;
          }
        }
      }
    }
  }
}

@media (max-width: 360px) {
  .content-block {
    .wrapper {
      main {
        .calendar-wrapper {
          padding: 10px;
          
          .calendar {
            .calendar-grid {
              .week {
                gap: 2px;
              }
              
              .day {
                min-height: 40px;
                padding: 3px;
                
                .date {
                  font-size: 12px;
                }
                
                .slots {
                  font-size: 10px;
                }
              }
            }
          }
        }
      }
    }
  }
}

@media (max-width: 830px) {
  .content-block {
    .wrapper {
      gap: 15px;
      
      aside {
        min-width: 200px;
      }

      main {
        min-width: 0;
        
        .calendar-wrapper {
          .calendar {
            .calendar-grid {
              .time-slots-row {
                margin: 0;
                padding: 10px;
                border-top: 1px solid #eee;
                background: #fff;
                
                .selected-date {
                  margin-bottom: 10px;
                }

                .time-slots {
                  margin: 0;
                }
              }

              .day {
                &.selected {
                  &::after {
                    z-index: 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

@media (max-width: 1100px) {
  .calendar-wrapper {
    .calendar {
      .calendar-grid {
        .day {
          min-height: 50px;
          
          .date {
            font-size: 14px;
          }
          
          .slots {
            font-size: 11px;
          }
        }
      }
    }
  }
}

// Добавляем стили для временных слотов
.time-slots {
  background: #fff;
  border-radius: 8px;
  padding: 20px;
  margin-top: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  
  .time-slots-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    
    h3 {
      font-size: 18px;
      color: #333;
      margin: 0;
    }
    
    .available-slots {
      color: #666;
      font-size: 14px;
    }
  }
  
  .shifts {
    display: flex;
    flex-direction: column;
    gap: 20px;
    
    .shift {
      .shift-header {
        color: #666;
        font-size: 14px;
        margin-bottom: 15px;
      }
      
      .slots-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
        gap: 10px;
        
        .time-slot {
          background: none;
          border: 1px solid #eee;
          border-radius: 4px;
          padding: 8px;
          color: #333;
          font-size: 14px;
          cursor: pointer;
          transition: all 0.2s;
          
          &:hover {
            border-color: #FF5722;
            color: #FF5722;
          }
          
          &.selected {
            background: #FF5722;
            border-color: #FF5722;
            color: white;
          }
        }
      }
    }
  }
}

// Добавляем медиа-запрос для мобильных устройств
@media (max-width: 768px) {
  .time-slots {
    margin: 20px -15px 0;
    border-radius: 0;
    
    .shifts {
      .shift {
        .slots-grid {
          grid-template-columns: repeat(auto-fill, minmax(70px, 1fr));
          gap: 8px;
          
          .time-slot {
            padding: 6px;
            font-size: 13px;
          }
        }
      }
    }
  }
}

@keyframes slideDown {
  0% {
    opacity: 0;
    transform: translateY(-20px);
    max-height: 0;
  }
  50% {
    opacity: 0.5;
    transform: translateY(-10px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
    max-height: 500px;
  }
}

@keyframes slideUp {
  0% {
    opacity: 1;
    transform: translateY(0);
    max-height: 500px;
  }
  50% {
    opacity: 0.5;
    transform: translateY(-10px);
  }
  100% {
    opacity: 0;
    transform: translateY(-20px);
    max-height: 0;
  }
}

.time-slots-row {
  &.ng-enter {
    animation: slideDown 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
  
  &.ng-leave {
    animation: slideUp 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
}


FILE: TalonByAngular/src/app/modules/order/datetime-selection/datetime-selection.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DatetimeSelectionComponent } from './datetime-selection.component';

describe('DatetimeSelectionComponent', () => {
  let component: DatetimeSelectionComponent;
  let fixture: ComponentFixture<DatetimeSelectionComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [DatetimeSelectionComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(DatetimeSelectionComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


FILE: TalonByAngular/src/app/modules/order/datetime-selection/datetime-selection.component.ts
import { Component, OnInit, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { Hospital, DoctorDetails } from '../../../interfaces/order.interface';
import { OrderService } from '../../../services/order.service';
import { trigger, transition, style, animate } from '@angular/animations';

interface CalendarDay {
  date: number;
  month: number;
  year: number;
  isToday: boolean;
  isWeekend: boolean;
  isDisabled: boolean;
  availableSlots: number;
}

@Component({
  selector: 'app-datetime-selection',
  templateUrl: './datetime-selection.component.html',
  styleUrls: ['./datetime-selection.component.scss'],
  animations: [
    trigger('slideInOut', [
      transition(':enter', [
        style({ 
          opacity: 0,
          height: 0
        }),
        animate('400ms ease-in-out', style({ 
          opacity: 1,
          height: '*'
        }))
      ]),
      transition(':leave', [
        style({ 
          opacity: 1,
          height: '*'
        }),
        animate('400ms ease-in-out', style({ 
          opacity: 0,
          height: 0
        }))
      ])
    ])
  ]
})
export class DatetimeSelectionComponent implements OnInit, OnDestroy {
  hospital: Hospital | null = null;
  doctor: DoctorDetails | null = null;
  currentMonth: Date = new Date();
  calendar: CalendarDay[][] = [];
  weekDays = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
  months = [
    'Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь',
    'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'
  ];
  selectedDate: Date | null = null;
  availableTimeSlots: string[] = [];
  loading = false;
  error: string | null = null;
  isMobile = false;
  isDetailsOpen = false;

  firstShiftSlots: string[] = [
    '09:00', '09:20', '09:40', '10:00', '10:20', 
    '12:40', '13:00', '13:20', '13:40', '14:00',
    '14:20', '14:40', '18:20', '19:00', '19:20'
  ];

  constructor(
    private router: Router,
    private orderService: OrderService
  ) {
    const state = this.router.getCurrentNavigation()?.extras.state;
    if (state) {
      this.hospital = state['hospital'];
      this.doctor = state['doctor'];
    }
    this.checkScreenSize();
  }

  ngOnInit() {
    if (!this.hospital || !this.doctor) {
      this.router.navigate(['/order']);
      return;
    }
    this.generateCalendar();
    window.addEventListener('resize', this.checkScreenSize.bind(this));
  }

  ngOnDestroy() {
    window.removeEventListener('resize', this.checkScreenSize.bind(this));
  }

  generateCalendar() {
    const firstDay = new Date(this.currentMonth.getFullYear(), this.currentMonth.getMonth(), 1);
    const lastDay = new Date(this.currentMonth.getFullYear(), this.currentMonth.getMonth() + 1, 0);
    
    const weeks: CalendarDay[][] = [];
    let currentWeek: CalendarDay[] = [];
    
    // Добавляем пустые дни в начале месяца
    let firstDayOfWeek = firstDay.getDay() || 7;
    for (let i = 1; i < firstDayOfWeek; i++) {
      currentWeek.push({
        date: 0,
        month: this.currentMonth.getMonth(),
        year: this.currentMonth.getFullYear(),
        isToday: false,
        isWeekend: false,
        isDisabled: true,
        availableSlots: 0
      });
    }

    // Заполняем дни месяца
    for (let day = 1; day <= lastDay.getDate(); day++) {
      const date = new Date(this.currentMonth.getFullYear(), this.currentMonth.getMonth(), day);
      const isWeekend = date.getDay() === 0 || date.getDay() === 6;
      
      currentWeek.push({
        date: day,
        month: this.currentMonth.getMonth(),
        year: this.currentMonth.getFullYear(),
        isToday: this.isToday(date),
        isWeekend,
        isDisabled: date < new Date(),
        availableSlots: Math.floor(Math.random() * 12) + 1 // Временно для демонстрации
      });

      if (currentWeek.length === 7) {
        weeks.push(currentWeek);
        currentWeek = [];
      }
    }

    // Добавляем оставшиеся дни
    if (currentWeek.length > 0) {
      while (currentWeek.length < 7) {
        currentWeek.push({
          date: 0,
          month: this.currentMonth.getMonth(),
          year: this.currentMonth.getFullYear(),
          isToday: false,
          isWeekend: false,
          isDisabled: true,
          availableSlots: 0
        });
      }
      weeks.push(currentWeek);
    }

    this.calendar = weeks;
  }

  isToday(date: Date): boolean {
    const today = new Date();
    return date.getDate() === today.getDate() &&
           date.getMonth() === today.getMonth() &&
           date.getFullYear() === today.getFullYear();
  }

  prevMonth() {
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Сбрасываем время
    
    const prevMonth = new Date(this.currentMonth.getFullYear(), this.currentMonth.getMonth() - 1, 1);
    if (prevMonth >= today || this.currentMonth.getMonth() > today.getMonth()) {
      this.currentMonth = prevMonth;
      this.generateCalendar();
    }
  }

  nextMonth() {
    const maxDate = new Date();
    maxDate.setMonth(maxDate.getMonth() + 3);
    
    const nextMonth = new Date(this.currentMonth.getFullYear(), this.currentMonth.getMonth() + 1);
    
    if (nextMonth <= maxDate) {
      this.currentMonth = nextMonth;
      this.generateCalendar();
    }
  }

  selectDate(day: CalendarDay) {
    if (day.isDisabled || day.date === 0) return;
    
    // Если нажали на уже выбранную дату - скрываем слоты
    if (this.selectedDate && 
        this.selectedDate.getDate() === day.date && 
        this.selectedDate.getMonth() === day.month && 
        this.selectedDate.getFullYear() === day.year) {
      this.selectedDate = null;
    } else {
      this.selectedDate = new Date(day.year, day.month, day.date);
    }
  }

  goToSpeciality() {
    this.router.navigate(['/order/speciality'], {
      state: { hospital: this.hospital }
    });
  }

  goToDoctor() {
    this.router.navigate(['/order/doctor'], {
      state: { 
        hospital: this.hospital,
        speciality: this.doctor?.doctorsSpeciality
      }
    });
  }

  getPhones(): { isLabel: boolean; text: string }[] {
    if (!this.hospital?.phones) return [];
    
    const result: { isLabel: boolean; text: string }[] = [];
    const sections = this.hospital.phones.split(/(?=(?:Регистратура:|Женская консультация:|Стоматология:|Студенческая деревня:))/);
    
    sections.forEach(section => {
      if (!section.trim()) return;
      const [label, ...numbers] = section.split(/(?=\+)/);
      if (label.trim()) {
        result.push({ isLabel: true, text: label.trim() });
      }
      numbers.forEach(number => {
        if (number.trim()) {
          result.push({ isLabel: false, text: number.trim() });
        }
      });
    });
    
    return result;
  }

  getWorkingHours(day: string): string {
    if (!this.hospital?.workingHours) return '';
    
    const schedules = this.hospital.workingHours.split(',');
    const daySchedule = schedules.find(schedule => 
      schedule.trim().startsWith(day)
    );
    
    if (daySchedule) {
      const timeMatch = daySchedule.match(/(?:ПН-ПТ|СБ):\s*([\d:-]+)/);
      return timeMatch ? timeMatch[1].trim() : '';
    }
    return '';
  }

  getDomain(url: string | undefined): string {
    if (!url) return '';
    return url.replace(/^https?:\/\//, '');
  }

  // Добавим метод для проверки, можно ли переключиться на следующий месяц
  canGoToNextMonth(): boolean {
    const maxDate = new Date();
    maxDate.setMonth(maxDate.getMonth() + 3);
    
    const nextMonth = new Date(this.currentMonth.getFullYear(), this.currentMonth.getMonth() + 1);
    return nextMonth <= maxDate;
  }

  // Добавим метод для проверки, можно ли переключиться на предыдущий месяц
  canGoToPrevMonth(): boolean {
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Сбрасываем время
    
    const firstDayOfCurrentMonth = new Date(this.currentMonth.getFullYear(), this.currentMonth.getMonth(), 1);
    return firstDayOfCurrentMonth > today;
  }

  checkScreenSize() {
    this.isMobile = window.innerWidth <= 768;
  }

  toggleDetails() {
    this.isDetailsOpen = !this.isDetailsOpen;
  }

  getDayOfWeek(date: Date): string {
    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];
    return days[date.getDay()];
  }

  getAvailableSlotsCount(): number {
    return this.firstShiftSlots.length;
  }
}


FILE: TalonByAngular/src/app/modules/order/datetime-selection/datetime-selection.module.ts
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DatetimeSelectionRoutingModule } from './datetime-selection-routing.module';
import { DatetimeSelectionComponent } from './datetime-selection.component';

@NgModule({
  declarations: [DatetimeSelectionComponent],
  imports: [
    CommonModule,
    DatetimeSelectionRoutingModule
  ]
})
export class DatetimeSelectionModule { }


FILE: TalonByAngular/src/app/modules/order/doctor-selection/doctor-selection.component.html
<div class="speciality-page">
  <!-- Мобильное меню -->
  <div class="mobile-details" *ngIf="isMobile">
    <div class="mobile-header" (click)="toggleDetails()">
      <h1>{{hospital?.name}}</h1>
      <span class="toggle-btn">
        {{isDetailsOpen ? '‹ Скрыть' : 'Показать подробнее ›'}}
      </span>
    </div>

    <div class="mobile-content" [class.open]="isDetailsOpen">
      <div class="info-grid">
        <div class="address-block">
          <p>{{hospital?.address}}</p>
          <a href="#" class="map-link">показать на карте</a>
        </div>
        <div class="registry-block">
          <div class="phones">
            <ng-container *ngFor="let item of getPhones()">
              <span *ngIf="item.isLabel" class="label">{{item.text}}</span>
              <a *ngIf="!item.isLabel" href="tel:{{item.text}}">{{item.text}}</a>
            </ng-container>
          </div>
        </div>
        <div class="schedule-block">
          <div class="schedule-row">
            <span class="label">ПН-ПТ:</span>{{getWorkingHours('ПН-ПТ')}}
          </div>
          <div class="schedule-row">
            <span class="label">СБ:</span>{{getWorkingHours('СБ')}}
          </div>
        </div>
        <div class="contacts-block">
          <a *ngIf="hospital?.website" href="{{hospital?.website}}" class="website">{{getDomain(hospital?.website)}}</a>
          <a *ngIf="hospital?.email" href="mailto:{{hospital?.email}}" class="email">{{hospital?.email}}</a>
        </div>
      </div>

      <nav class="hospital-nav">
        <ul>
          <li><a href="#">Информация</a></li>
          <li><a href="#">Врачи</a></li>
          <li><a href="#">Расписание врачей</a></li>
        </ul>
      </nav>
    </div>
  </div>

  <!-- Десктопная версия -->
  <div class="hospital-header" *ngIf="!isMobile && hospital">
    <div class="wrapper">
      <div class="hospital-info">
        <h1>{{hospital.name}}</h1>
        <div class="info-grid">
          <div class="address-block">
            <p>{{hospital.address}}</p>
            <a href="#" class="map-link">показать на карте</a>
          </div>
          <div class="registry-block">
            <div class="phones">
              <ng-container *ngFor="let item of getPhones()">
                <span *ngIf="item.isLabel" class="label">{{item.text}}</span>
                <a *ngIf="!item.isLabel" href="tel:{{item.text}}">{{item.text}}</a>
              </ng-container>
            </div>
          </div>
          <div class="schedule-block">
            <div class="schedule-row">
              <span class="label">ПН-ПТ:</span>{{getWorkingHours('ПН-ПТ')}}
            </div>
            <div class="schedule-row">
              <span class="label">СБ:</span>{{getWorkingHours('СБ')}}
            </div>
          </div>
          <div class="contacts-block">
            <a *ngIf="hospital.website" href="{{hospital.website}}" class="website">{{getDomain(hospital.website)}}</a>
            <a *ngIf="hospital.email" href="mailto:{{hospital.email}}" class="email">{{hospital.email}}</a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Основной контент -->
  <div class="wrapper">
    <div class="content-block">
      <aside *ngIf="!isMobile">
        <div class="order-steps">
          <div class="step completed" (click)="goBack()">Специальность</div>
          <div class="step active">Врач</div>
          <div class="step">Дата и время</div>
          <div class="step">Личные данные</div>
          <div class="step">Запись</div>
        </div>

        <nav class="hospital-nav">
          <ul>
            <li><a href="#">Информация</a></li>
            <li><a href="#">Врачи</a></li>
            <li><a href="#">Расписание врачей</a></li>
          </ul>
        </nav>
      </aside>

      <main>
        <h2>Заказ талона</h2>
        <p class="subtitle">Выбор врача</p>

        <div *ngIf="loading" class="loading">
          Загрузка списка врачей...
        </div>

        <div *ngIf="error" class="error">
          {{error}}
        </div>

        <div class="doctors-grid" *ngIf="!loading && !error">
          <div class="row">
            <div class="doctor-card" *ngFor="let doctor of doctors" (click)="selectDoctor(doctor)">
              <div class="doctor-info">
                <img *ngIf="doctor.photo" [src]="doctor.photo" [alt]="doctor.fullName" class="doctor-photo">
                <div class="doctor-details">
                  <h5>{{doctor.fullName}}</h5>
                  <p class="speciality">{{doctor.doctorsSpeciality?.name}}</p>
                  <p class="cabinet">Кабинет {{doctor.office}}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  </div>
</div>


FILE: TalonByAngular/src/app/modules/order/doctor-selection/doctor-selection.component.scss
@import '../speciality-selection/speciality-selection.component.scss';

// Переопределяем и добавляем новые стили
.order-steps {
  .step {
    &.completed {
      color: #333 !important;
      font-weight: 500;
      cursor: pointer;
      
      &:hover {
        color: #FF5722 !important;
      }
    }
  }
}

.doctors-grid {
  .row {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
  }

  .doctor-card {
    background: #fff;
    border-radius: 8px;
    padding: 20px;
    cursor: pointer;
    transition: all 0.2s;
    border: 1px solid #eee;

    &:hover {
      border-color: #FF5722;
    }

    .doctor-info {
      display: flex;
      flex-direction: row-reverse;
      gap: 15px;
      justify-content: flex-end;
    }

    .doctor-photo {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      object-fit: cover;
    }

    .doctor-details {
      flex-grow: 1;

      h5 {
        font-size: 16px;
        color: #333;
        margin: 0;
        font-weight: 500;
      }

      .speciality {
        color: #666;
        font-size: 14px;
        margin: 0;
        line-height: 1.2;
      }

      .cabinet {
        color: #999;
        font-size: 13px;
        margin: 4px 0 0;
      }
    }
  }
}

@media (max-width: 768px) {
  .doctors-grid .row {
    grid-template-columns: 1fr;
  }
}


FILE: TalonByAngular/src/app/modules/order/doctor-selection/doctor-selection.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DoctorSelectionComponent } from './doctor-selection.component';

describe('DoctorSelectionComponent', () => {
  let component: DoctorSelectionComponent;
  let fixture: ComponentFixture<DoctorSelectionComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [DoctorSelectionComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(DoctorSelectionComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


FILE: TalonByAngular/src/app/modules/order/doctor-selection/doctor-selection.component.ts
import { Component, OnInit, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { Hospital, DoctorDetails } from '../../../interfaces/order.interface';
import { OrderService } from '../../../services/order.service';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

interface PhoneItem {
  isLabel: boolean;
  text: string;
}

@Component({
  selector: 'app-doctor-selection',
  templateUrl: './doctor-selection.component.html',
  styleUrls: ['./doctor-selection.component.scss']
})
export class DoctorSelectionComponent implements OnInit, OnDestroy {
  hospital: Hospital | null = null;
  specialityId: number | null = null;
  isMobile = false;
  isDetailsOpen = false;
  loading = false;
  error: string | null = null;
  doctors: DoctorDetails[] = [];
  
  constructor(
    private router: Router,
    private orderService: OrderService
  ) {
    const state = this.router.getCurrentNavigation()?.extras.state;
    console.log('Received state:', state);
    if (state) {
      this.hospital = state['hospital'];
      const speciality = state['speciality'];
      this.specialityId = speciality?.id;
      console.log('Set specialityId:', this.specialityId);
    }
    this.checkScreenSize();
  }

  ngOnInit(): void {
    if (!this.hospital) {
      this.router.navigate(['/order']);
      return;
    }
    
    window.addEventListener('resize', this.checkScreenSize.bind(this));
    this.loadDoctors();
  }

  ngOnDestroy(): void {
    window.removeEventListener('resize', this.checkScreenSize.bind(this));
  }

  private checkScreenSize(): void {
    this.isMobile = window.innerWidth <= 768;
  }

  toggleDetails(): void {
    this.isDetailsOpen = !this.isDetailsOpen;
  }

  selectDoctor(doctor: DoctorDetails): void {
    console.log('Selecting doctor:', doctor);
    this.router.navigate(['/order/datetime'], {
      state: { 
        hospital: this.hospital,
        doctor: doctor
      }
    });
  }

  getPhones(): PhoneItem[] {
    if (!this.hospital?.phones) return [];
    
    const result: PhoneItem[] = [];
    const sections = this.hospital.phones.split(/(?=(?:Регистратура:|Женская консультация:|Стоматология:|Студенческая деревня:))/);
    
    sections.forEach(section => {
      if (!section.trim()) return;
      const [label, ...numbers] = section.split(/(?=\+)/);
      if (label.trim()) {
        result.push({ isLabel: true, text: label.trim() });
      }
      numbers.forEach(number => {
        if (number.trim()) {
          result.push({ isLabel: false, text: number.trim() });
        }
      });
    });
    
    return result;
  }

  getWorkingHours(day: string): string {
    if (!this.hospital?.workingHours) return '';
    
    if (this.hospital.workingHours.toLowerCase().includes('круглосуточно')) {
      return 'круглосуточно';
    }

    const schedules = this.hospital.workingHours.split(',');
    const daySchedule = schedules.find(schedule => 
      schedule.trim().startsWith(day)
    );
    
    if (daySchedule) {
      const timeMatch = daySchedule.match(/(?:ПН-ПТ|СБ):\s*([\d:-]+)/);
      return timeMatch ? timeMatch[1].trim() : '';
    }

    return '';
  }

  getDomain(url: string | undefined): string {
    if (!url) return '';
    return url.replace(/^https?:\/\//, '');
  }

  goBack(): void {
    this.router.navigate(['/order/speciality'], {
      state: { hospital: this.hospital }
    });
  }

  private loadDoctors(): void {
    if (!this.hospital?.hospitalId) return;
    
    this.loading = true;
    this.error = null;

    if (this.specialityId) {
      // Если есть ID специальности, загружаем врачей по специальности и больнице
      this.orderService.getDoctorsBySpecialityAndHospital(this.hospital.hospitalId, this.specialityId)
        .subscribe({
          next: (doctors) => {
            this.doctors = doctors;
            this.loading = false;
          },
          error: (error) => {
            console.error('Error loading doctors:', error);
            this.error = 'Ошибка при загрузке списка врачей';
            this.loading = false;
          }
        });
    } else {
      // Иначе загружаем всех врачей больницы
      this.orderService.getDoctorsByHospital(this.hospital.hospitalId)
        .subscribe({
          next: (doctors) => {
            this.doctors = doctors;
            this.loading = false;
          },
          error: (error) => {
            console.error('Error loading doctors:', error);
            this.error = 'Ошибка при загрузке списка врачей';
            this.loading = false;
          }
        });
    }
  }
}


FILE: TalonByAngular/src/app/modules/order/doctor-selection/doctor-selection.module.ts
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, Routes } from '@angular/router';
import { DoctorSelectionComponent } from './doctor-selection.component';

const routes: Routes = [
  {
    path: '',
    component: DoctorSelectionComponent
  }
];

@NgModule({
  declarations: [DoctorSelectionComponent],
  imports: [
    CommonModule,
    RouterModule.forChild(routes)
  ]
})
export class DoctorSelectionModule { }


FILE: TalonByAngular/src/app/modules/order/order-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { OrderComponent } from './order.component';

const routes: Routes = [
  { 
    path: '', 
    component: OrderComponent 
  },
  { 
    path: 'speciality', 
    loadChildren: () => import('./speciality-selection/speciality-selection.module')
      .then(m => m.SpecialitySelectionModule)
  },
  { 
    path: 'doctor', 
    loadChildren: () => import('./doctor-selection/doctor-selection.module')
      .then(m => m.DoctorSelectionModule)
  },
  { 
    path: 'datetime', 
    loadChildren: () => import('./datetime-selection/datetime-selection.module')
      .then(m => m.DatetimeSelectionModule)
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class OrderRoutingModule { } 


FILE: TalonByAngular/src/app/modules/order/order.component.html
<div class="order-page">
  <div class="wrapper">
    <!-- Сайдбар с типами учреждений -->
    <div class="hospital-types-sidebar">
      <h3>Тип учреждения:</h3>
      <div class="type-filters">
        <label *ngFor="let type of hospitalTypes" class="type-checkbox">
          <input type="checkbox" 
                 [checked]="selectedTypes.includes(type.id)"
                 (change)="onTypeChange(type.id)">
          {{ type.name }}
        </label>
      </div>
    </div>

    <!-- Основной контент -->
    <div class="main-content">
      <h1 class="page-title">Заказ талона</h1>
      <h2>Выбор учреждения</h2>

      <div class="hospital-selection">
        <!-- Поиск -->
        <div class="search-box">
          <input type="text" 
                 [formControl]="searchControl"
                 placeholder="Введите название учреждения"
                 class="search-input">
        </div>

        <!-- Список учреждений -->
        <div class="hospitals-list">
          <div *ngFor="let hospital of filteredHospitals" 
               class="hospital-card"
               (click)="selectHospital(hospital)"
               [class.selected]="selectedHospitalId === hospital.hospitalId">
            <h3>{{ hospital.name }}</h3>
            <p class="address">{{ hospital.address }}</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div> 


FILE: TalonByAngular/src/app/modules/order/order.component.scss
.order-page {
  background: #f5f5f5;
  min-height: 100vh;
  
  .wrapper {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    display: flex;
    gap: 30px;
    position: relative;
  }

  h1 {
    font-size: 25.6px;
    line-height: 1.2;
    color: #333;
    margin: 0 0 20px;
    font-weight: 700;
  }

  .page-title {
    font-size: 31px;
    font-weight: 700;
    color: #333;
    margin-bottom: 10px;
    margin-top: 0;
  }

  h2 {
    font-size: 16px;
    color: #666;
    margin-bottom: 20px;
  }

  .hospital-types-sidebar {
    width: 250px;
    flex-shrink: 0;
    padding: 20px;
    height: fit-content;
    border-radius: 8px;
    margin-top: 80px;

    h3 {
      color: #333;
      font-size: 18.2px;
      margin-bottom: 15px;
    }

    .type-filters {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
  }

  .main-content {
    flex-grow: 1;
    margin-top: 50px;
  }
}

.order-form {
  background: #fff;
  padding: 32px;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  
  .form-group {
    margin-bottom: 24px;
    
    label {
      display: block;
      font-size: 16px;
      font-weight: 500;
      color: #333;
      margin-bottom: 8px;
    }
    
    select, input {
      width: 100%;
      height: 48px;
      padding: 0 16px;
      border: 1px solid #E0E0E0;
      border-radius: 4px;
      font-size: 16px;
      color: #333;
      background: #fff;
      
      &:disabled {
        background: #F5F5F5;
        cursor: not-allowed;
      }
      
      &:focus {
        border-color: #FF5722;
        outline: none;
      }
    }
  }
  
  .time-slots {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 12px;
    
    button {
      height: 40px;
      border: 1px solid #E0E0E0;
      border-radius: 4px;
      background: #fff;
      font-size: 14px;
      color: #333;
      cursor: pointer;
      transition: all 0.3s ease;
      
      &:hover:not(:disabled) {
        border-color: #FF5722;
        color: #FF5722;
      }
      
      &.selected {
        background: #FF5722;
        border-color: #FF5722;
        color: #fff;
      }
      
      &:disabled {
        background: #F5F5F5;
        color: #999;
        cursor: not-allowed;
      }
    }
  }
  
  .submit-button {
    width: 100%;
    height: 48px;
    background: #FF5722;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    font-weight: 500;
    color: #fff;
    cursor: pointer;
    transition: background-color 0.3s ease;
    
    &:hover:not(:disabled) {
      background: #F4511E;
    }
    
    &:disabled {
      background: #FFCCBC;
      cursor: not-allowed;
    }
  }
}

.hospital-selection {
  border-radius: 4px;
  // padding: 10px;

  .search-box {
    margin-bottom: 20px;

    .search-input {
      width: 99%;
      height: 40px;
      
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 14px;
      background: #fff;
      
      &:focus {
        outline: none;
        border-color: #FF5722;
      }
    }
  }

  .hospitals-list {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 15px;

    .hospital-card {
      padding: 7px 10px;
      background: #fff;
      border: 1px solid #eee;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.2s;
      position: relative;

      &:hover {
        border-color: #FF5722;
      }

      &.selected {
        border-color: #FF5722;
        background-color: #FFF5F2;
      }

      h3 {
        font-size: 16px;
        color: #333;
        margin-bottom: 8px;
        margin-right: 8px;
        font-weight: 400;
      }

      .address {
        font-size: 14px;
        color: #999;
      }

      &::after {
        content: '';
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%) rotate(-45deg);
        width: 8px;
        height: 8px;
        margin-left: 10px;
        border-right: 2px solid #FF5722;
        border-bottom: 2px solid #FF5722;
      }
    }
  }
}

// Медиа-запросы
@media (min-width: 1200px) {
  .order-page .wrapper {
    padding: 0 calc((100% - 960px) / 2); // Центрируем контент
    margin-left: -110px; // Сдвигаем влево только на больших экранах
  }
}

@media (max-width: 1200px) {
  .order-page .wrapper {
    padding: 15px;
    margin-left: 0;
  }

  .hospitals-list {
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)) !important;
  }
}

@media (max-width: 768px) {
  .order-page {
    .wrapper {
      flex-direction: column;
      padding: 15px;
      margin-left: 0;
    }

    .hospital-types-sidebar {
      width: 100%;
      margin-top: 0;
    }

    .main-content {
      margin-top: 15px;
    }

    .hospital-selection {
      .search-box {
        margin-top: 10px;
      }

      .hospitals-list {
        grid-template-columns: 1fr;
      }
    }
  }
}

@media (max-width: 480px) {
  .page-title {
    font-size: 24px !important;
  }

  .hospital-card {
    padding: 10px !important;
    
    h3 {
      font-size: 14px !important;
    }
  }
} 


FILE: TalonByAngular/src/app/modules/order/order.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';
import { OrderService } from '../../services/order.service';
import { Hospital, Department, Doctor, TimeSlot, HospitalType, DoctorDetails, Speciality } from '../../interfaces/order.interface';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { Router } from '@angular/router';

@Component({
  selector: 'app-order',
  templateUrl: './order.component.html',
  styleUrls: ['./order.component.scss']
})
export class OrderComponent implements OnInit {
  orderForm: FormGroup;
  hospitals: Hospital[] = [];
  departments: Department[] = [];
  doctors: Doctor[] = [];
  timeSlots: TimeSlot[] = [];
  isLoading = false;
  today = new Date().toISOString().split('T')[0];

  filteredHospitals: Hospital[] = [];
  searchTerm: string = '';
  selectedTypes: HospitalType[] = [];
  
  hospitalTypes = [
    { id: HospitalType.Adult, name: 'Взрослая' },
    { id: HospitalType.Children, name: 'Детская' },
    { id: HospitalType.Specialized, name: 'Специализированная' }
  ];

  searchControl = new FormControl('');
  selectedHospitalId: number | null = null;

  specialities: Speciality[] = [];

  constructor(
    private fb: FormBuilder,
    private orderService: OrderService,
    private router: Router
  ) {
    this.orderForm = this.fb.group({
      hospitalId: ['', Validators.required],
      specialityId: ['', Validators.required],
      doctorId: ['', Validators.required],
      date: ['', Validators.required],
      timeSlotId: ['', Validators.required],
      searchTerm: ['']
    });
  }

  ngOnInit(): void {
    this.loadHospitals();
    this.loadSpecialities();
    
    // Подписываемся на изменения выбора специальности
    this.orderForm.get('specialityId')?.valueChanges.subscribe(specialityId => {
      if (specialityId && specialityId !== 'undefined' && specialityId !== '') {
        this.loadDoctorsBySpeciality(Number(specialityId));
        this.orderForm.patchValue({
          doctorId: '',
          timeSlotId: ''
        });
      } else {
        this.doctors = [];
      }
    });

    // Подписываемся на изменения выбора врача и даты
    this.orderForm.get('doctorId')?.valueChanges.subscribe(() => this.loadTimeSlots());
    this.orderForm.get('date')?.valueChanges.subscribe(() => this.loadTimeSlots());

    // Подписка на изменение поискового запроса
    this.searchControl.valueChanges.pipe(
      debounceTime(300),
      distinctUntilChanged()
    ).subscribe(searchTerm => {
      this.filterHospitals();
    });
  }

  private loadHospitals(): void {
    this.isLoading = true;
    console.log('Loading hospitals...');
    this.orderService.getHospitals().subscribe({
      next: (hospitals) => {
        console.log('Received hospitals:', hospitals);
        if (Array.isArray(hospitals)) {
          this.hospitals = hospitals;
          this.filterHospitals();
        } else {
          console.warn('Received non-array response:', hospitals);
          this.hospitals = [];
        }
        this.isLoading = false;
      },
      error: (error) => {
        console.error('Error loading hospitals:', error);
        this.hospitals = [];
        this.isLoading = false;
      }
    });
  }

  private loadTimeSlots(): void {
    const doctorId = this.orderForm.get('doctorId')?.value;
    const date = this.orderForm.get('date')?.value;
    
    if (doctorId && date) {
      this.isLoading = true;
      this.orderService.getTimeSlots(doctorId, date).subscribe({
        next: (timeSlots) => {
          this.timeSlots = timeSlots;
          this.isLoading = false;
        },
        error: (error) => {
          console.error('Error loading time slots:', error);
          this.isLoading = false;
        }
      });
    }
  }

  private loadSpecialities(): void {
    if (!this.selectedHospitalId) return;
    
    this.isLoading = true;
    this.orderService.getSpecialities(this.selectedHospitalId).subscribe({
      next: (specialities) => {
        console.log('Received specialities:', specialities);
        if (Array.isArray(specialities)) {
          this.specialities = specialities;
        }
        this.isLoading = false;
      },
      error: (error) => {
        console.error('Error loading specialities:', error);
        this.isLoading = false;
      }
    });
  }

  private loadDoctorsBySpeciality(specialityId: number): void {
    if (!specialityId || isNaN(specialityId)) {
      this.doctors = [];
      return;
    }

    if (!this.selectedHospitalId) {
      console.warn('No hospital selected');
      return;
    }

    this.isLoading = true;
    this.orderService.getDoctorsBySpecialityAndHospital(this.selectedHospitalId, specialityId)
      .subscribe({
        next: (doctors: DoctorDetails[]) => {
          console.log('Received doctors:', doctors);
          if (Array.isArray(doctors)) {
            // Преобразуем DoctorDetails в Doctor
            this.doctors = doctors.map(doctor => ({
              id: doctor.doctorId,
              name: doctor.fullName,
              specialityId: doctor.doctorsSpecialityId,
              schedule: {
                start: doctor.workingHours,
                end: doctor.workingHours
              }
            }));
          } else {
            console.warn('Received non-array response:', doctors);
            this.doctors = [];
          }
          this.isLoading = false;
        },
        error: (error: any) => {
          console.error('Error loading doctors:', error);
          this.doctors = [];
          this.isLoading = false;
        }
      });
  }

  onSubmit(): void {
    if (this.orderForm.valid) {
      const formData = this.orderForm.value;
      this.orderService.createAppointment({
        hospitalId: formData.hospitalId,
        departmentId: formData.departmentId,
        doctorId: formData.doctorId,
        timeSlotId: formData.timeSlotId,
        patientId: 1,
        status: 'pending'
      }).subscribe({
        next: (response) => {
          console.log('Appointment created:', response);
          // Добавьте здесь логику успешного создания записи
        },
        error: (error) => {
          console.error('Error creating appointment:', error);
          // Добавьте здесь обработку ошибки
        }
      });
    }
  }

  onTypeChange(type: HospitalType): void {
    const index = this.selectedTypes.indexOf(type);
    if (index === -1) {
      this.selectedTypes.push(type);
    } else {
      this.selectedTypes.splice(index, 1);
    }
    this.filterHospitals();
  }

  private filterHospitals(): void {
    const searchTerm = this.searchControl.value || '';
    
    // Создаем регулярное выражение из поискового запроса
    // 'i' флаг для игнорирования регистра
    // Экранируем специальные символы
    const searchRegex = new RegExp(searchTerm.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'i');
    
    this.filteredHospitals = this.hospitals.filter(hospital => {
      const matchesSearch = searchRegex.test(hospital.name); // Ищем только по имени
      const matchesType = this.selectedTypes.length === 0 || 
                         this.selectedTypes.includes(hospital.type);
      
      return matchesSearch && matchesType;
    });
  }

  selectHospital(hospital: Hospital): void {
    if (!hospital || typeof hospital.hospitalId !== 'number') {
      console.error('Invalid hospital data:', hospital);
      return;
    }

    // Очищаем объект больницы от ненужных полей перед передачей
    const cleanHospital = {
      hospitalId: hospital.hospitalId,
      name: hospital.name,
      address: hospital.address,
      type: hospital.type,
      workingHours: hospital.workingHours,
      phones: hospital.phones,
      email: hospital.email,
      description: hospital.description
    };

    console.log('Selecting hospital:', cleanHospital);
    this.selectedHospitalId = hospital.hospitalId;
    
    // Переход на следующую страницу с передачей данных
    this.router.navigate(['/order/speciality'], {
      state: { hospital: cleanHospital }
    }).then(() => {
      console.log('Navigation completed with hospital ID:', hospital.hospitalId);
    }).catch(error => {
      console.error('Navigation error:', error);
    });
  }
} 


FILE: TalonByAngular/src/app/modules/order/order.module.ts
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { OrderRoutingModule } from './order-routing.module';
import { OrderComponent } from './order.component';
import { Nl2brPipe } from '../../pipes/nl2br.pipe';

@NgModule({
  declarations: [
    OrderComponent,
    Nl2brPipe
  ],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    OrderRoutingModule
  ]
})
export class OrderModule { } 


FILE: TalonByAngular/src/app/modules/order/speciality-selection/speciality-selection-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { SpecialitySelectionComponent } from './speciality-selection.component';

const routes: Routes = [
  { path: '', component: SpecialitySelectionComponent }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class SpecialitySelectionRoutingModule { } 


FILE: TalonByAngular/src/app/modules/order/speciality-selection/speciality-selection.component.html
<div class="speciality-page">
  <!-- Мобильное меню -->
  <div class="mobile-details" *ngIf="isMobile">
    <div class="mobile-header" (click)="toggleDetails()">
      <h1>{{hospital?.name}}</h1>
      <span class="toggle-btn">
        {{isDetailsOpen ? '‹ Скрыть' : 'Показать подробнее ›'}}
      </span>
    </div>

    <div class="mobile-content" [class.open]="isDetailsOpen">
      <!-- Info Grid -->
      <div class="info-grid">
        <div class="address-block">
          <p>{{hospital?.address}}</p>
          <a href="#" class="map-link">показать на карте</a>
        </div>
        <div class="registry-block">
          <div class="phones">
            <ng-container *ngFor="let item of getPhones()">
              <span *ngIf="item.isLabel" class="label">{{item.text}}</span>
              <a *ngIf="!item.isLabel" href="tel:{{item.text}}">{{item.text}}</a>
            </ng-container>
          </div>
        </div>
        <div class="schedule-block">
          <div class="schedule-row">
            <span class="label">ПН-ПТ:</span>{{getWorkingHours('ПН-ПТ')}}
          </div>
          <div class="schedule-row">
            <span class="label">СБ:</span>{{getWorkingHours('СБ')}}
          </div>
        </div>
        <div class="contacts-block">
          <a *ngIf="hospital?.website" href="{{hospital?.website}}" class="website">{{getDomain(hospital?.website)}}</a>
          <a *ngIf="hospital?.email" href="mailto:{{hospital?.email}}" class="email">{{hospital?.email}}</a>
        </div>
      </div>

      <!-- Hospital Nav -->
      <nav class="hospital-nav">
        <ul>
          <li><a href="#">Информация</a></li>
          <li><a href="#">Врачи</a></li>
          <li><a href="#">Расписание врачей</a></li>
        </ul>
      </nav>
    </div>
  </div>

  <!-- Десктопная версия -->
  <div class="hospital-header" *ngIf="!isMobile && hospital">
    <div class="wrapper">
      <div class="hospital-info">
        <h1>{{hospital.name}}</h1>
        <div class="info-grid">
          <div class="address-block">
            <p>{{hospital.address}}</p>
            <a href="#" class="map-link">показать на карте</a>
          </div>
          <div class="registry-block">
            <div class="label"></div>
            <div class="phones">
              <ng-container *ngFor="let item of getPhones()">
                <span *ngIf="item.isLabel" class="label">{{item.text}}</span>
                <a *ngIf="!item.isLabel" href="tel:{{item.text}}">{{item.text}}</a>
              </ng-container>
            </div>
          </div>
          <div class="schedule-block">
            <div class="schedule-row">
              <span class="label">ПН-ПТ:</span>{{getWorkingHours('ПН-ПТ')}}
            </div>
            <div class="schedule-row">
              <span class="label">СБ:</span>{{getWorkingHours('СБ')}}
            </div>
          </div>
          <div class="contacts-block">
            <a *ngIf="hospital.website" href="{{hospital.website}}" class="website">{{getDomain(hospital.website)}}</a>
            <a *ngIf="hospital.email" href="mailto:{{hospital.email}}" class="email">{{hospital.email}}</a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Основной контент -->
  <div class="wrapper">
    <div class="content-block">
      <aside *ngIf="!isMobile">
        <div class="order-steps">
          <div class="step active">Специальность</div>
          <div class="step">Врач</div>
          <div class="step">Дата и время</div>
          <div class="step">Личные данные</div>
          <div class="step">Запись</div>
        </div>

        <nav class="hospital-nav">
          <ul>
            <li><a href="#">Информация</a></li>
            <li><a href="#">Врачи</a></li>
            <li><a href="#">Расписание врачей</a></li>
          </ul>
        </nav>
      </aside>

      <main>
        <h2>Заказ талона</h2>
        <p class="subtitle">Выбор специальности</p>

        <div class="specialities-grid">
          <div *ngIf="loading" class="loading">Загрузка специальностей...</div>
          <div *ngIf="error" class="error">{{error}}</div>
          
          <div class="row" *ngIf="!loading && !error && specialities.length > 0">
            <div class="speciality-card" *ngFor="let speciality of specialities" (click)="selectSpeciality(speciality)">
              <h5>{{speciality.name}}</h5>
            </div>
          </div>
        </div>

        <div class="payment-services">
          <a href="/services">Нет нужной специальности? Возможно, она есть в платных услугах</a>
        </div>
      </main>
    </div>
  </div>
</div>


FILE: TalonByAngular/src/app/modules/order/speciality-selection/speciality-selection.component.scss
.speciality-page {
  background: #f5f5f5;

  .hospital-header {
    background: #fafafa;
    padding: 20px 0;
    border-bottom: 1px solid #eee;

    .wrapper {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0px 20px 10px 20px;

      .hospital-info {
        h1 {
          font-size: 31px;
          font-weight: 700;
          color: #333;
          margin-bottom: 10px;
          margin-top: 0px;
        }

        .info-grid {
          display: grid;
          grid-template-columns: 
            minmax(150px, 250px)  // address-block
            minmax(100px, 140px)  // registry-block
            minmax(100px, 140px)  // schedule-block
            minmax(120px, 180px); // contacts-block
          gap: 20px;
          align-items: start;

          .address-block {
            min-width: 150px;
            max-width: 250px;
            p {
              color: #333;
              margin-bottom: 2px;
              font-size: 13px;
            }

            .map-link {
              color: #FF5722;
              text-decoration: none;
              font-size: 12px;
              
              &:hover {
                text-decoration: underline;
              }
            }
          }

          .registry-block {
            min-width: 100px;
            max-width: 140px;
            .label {
              color: #333;
              margin-bottom: 2px;
              font-weight: 600;
              font-size: 13px;
            }

            .phones {
              display: flex;
              flex-direction: column;
              gap: 4px; // Отступ между телефонами
              
              a {
                display: block;
                color: #FF5722;
                text-decoration: none;
                font-size: 13px;
                line-height: 1.2;
                word-wrap: break-word;
                
                &:hover {
                  text-decoration: underline;
                }
              }
            }
          }

          .schedule-block {
            min-width: 100px;
            max-width: 140px;
            .schedule-row {
              display: flex;
              align-items: center;
              margin-bottom: 1px;
              font-size: 13px;
              white-space: nowrap;

              .label {
                color: #333;
                font-weight: 600;
                margin-right: 4px;
              }

              .time {
                color: #333;
              }
            }
          }

          .contacts-block {
            min-width: 120px;
            max-width: 180px;
            display: flex;
            flex-direction: column;
            gap: 1px;

            a {
              color: #FF5722;
              text-decoration: none;
              font-size: 13px;

              &:hover {
                text-decoration: underline;
              }
            }
          }
        }
      }
    }
  }

  .wrapper {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px 20px;
  }

  .content-block {
    display: grid;
    grid-template-columns: 250px 1fr;
    gap: 30px;

    aside {
      .order-steps {
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 30px;

        .step {
          padding: 12px 15px;
          color: #999;
          font-size: 15px;
          position: relative;
          
          &.active {
            color: #FF5722;
            font-weight: 500;
            background: rgba(255,87,34,0.05);
            border-radius: 4px;

            &::before {
              content: '';
              position: absolute;
              left: 0;
              top: 0;
              bottom: 0;
              width: 3px;
              background: #FF5722;
              border-radius: 0 2px 2px 0;
            }
          }
        }
      }

      .hospital-nav {
        ul {
          list-style: none;
          padding: 0;
          margin: 0;

          li {
            margin-bottom: 4px;

            a {
              display: block;
              padding: 12px 15px;
              color: #333;
              text-decoration: none;
              font-size: 15px;

              &:hover {
                color: #FF5722;
              }
            }
          }
        }
      }
    }

    main {
      h2 {
        font-size: 24px;
        font-weight: 500;
        color: #333;
        margin-bottom: 8px;
      }

      .subtitle {
        color: #666;
        margin-bottom: 25px;
        font-size: 15px;
      }

      .specialities-grid {
        .row {
          display: grid;
          grid-template-columns: repeat(3, 1fr);
          gap: 15px;
        }

        .speciality-card {
          background: #fff;
          padding: 20px;
          border-radius: 8px;
          border: 1px solid #eee;
          cursor: pointer;
          transition: all 0.2s;

          &:hover {
            border-color: #FF5722;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
          }

          h5 {
            font-size: 16px;
            font-weight: 500;
            color: #333;
            margin: 0;
            line-height: 1.4;
          }
        }
      }

      .payment-services {
        margin-top: 30px;

        a {
          color: #FF5722;
          text-decoration: none;
          font-size: 15px;

          &:hover {
            text-decoration: underline;
          }
        }
      }
    }
  }
}

@media (max-width: 768px) {
  .speciality-page {
    .hospital-header {
      .wrapper {
        .hospital-info {
          h1 {
            font-size: 24px;
          }
          
          .info-grid {
            grid-template-columns: 1fr;
            gap: 15px;
          }
        }
      }
    }
  }
  .content-block {
    grid-template-columns: 1fr !important;
    
    aside {
      order: 2;
    }
    
    .specialities-grid .row {
      grid-template-columns: 1fr !important;
    }
  }
}

.loading, .error {
  text-align: center;
  padding: 20px;
  grid-column: 1 / -1;
}

.loading {
  color: #666;
}

.error {
  color: #dc3545;
}

// Добавляем стили для мобильной версии
.mobile-details {
  display: block;
  background: #fafafa;
  margin-top: 0;
  

  .mobile-header {
    padding: 15px 20px;
    border-bottom: 1px solid #eee;
    background: #fafafa;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;

    h1 {
      font-size: 18px;
      margin: 0;
      padding: 0;
      font-weight: 600;
      color: #333;
      line-height: 1.3;
    }

    .toggle-btn {
      color: #FF5722;
      font-size: 14px;
      white-space: nowrap;
      margin-left: 15px;
    }
  }

  .mobile-content {
    display: none;
    padding: 20px;
    border-bottom: 1px solid #eee;
    background: #fafafa;

    &.open {
      display: block;
    }

    .info-grid {
      display: flex;
      flex-direction: column;
      gap: 1px;
      margin-bottom: 20px;

      .address-block,
      .registry-block,
      .schedule-block,
      .contacts-block {
        background: #fff;
        padding: 15px;
        border-radius: 4px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      }

      .phones {
        display: flex;
        flex-direction: column;
        gap: 8px;

        .label {
          color: #333;
          font-weight: 600;
          font-size: 14px;
        }

        a {
          color: #FF5722;
          text-decoration: none;
          font-size: 14px;
          line-height: 1.4;
        }
      }
    }

    .hospital-nav {
      background: #fff;
      border-radius: 4px;
      overflow: hidden;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);

      ul {
        list-style: none;
        padding: 0;
        margin: 0;

        li {
          border-bottom: 1px solid #eee;
          
          &:last-child {
            border-bottom: none;
          }

          a {
            display: block;
            padding: 15px;
            color: #333;
            text-decoration: none;
            font-size: 14px;
            
            &:active {
              background: #f5f5f5;
            }
          }
        }
      }
    }
  }
}

@media (max-width: 768px) {
  .hospital-header {
    display: none;
  }

  .mobile-details {
    margin-top: 0;
  }

  .content-block {
    grid-template-columns: 1fr !important;
    padding-top: 0px;
    
    aside {
      display: none; // Скрываем боковую панель на мобильных
    }
    
    main {
      padding: 0;
    }
  }
}


FILE: TalonByAngular/src/app/modules/order/speciality-selection/speciality-selection.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SpecialitySelectionComponent } from './speciality-selection.component';

describe('SpecialitySelectionComponent', () => {
  let component: SpecialitySelectionComponent;
  let fixture: ComponentFixture<SpecialitySelectionComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SpecialitySelectionComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(SpecialitySelectionComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


FILE: TalonByAngular/src/app/modules/order/speciality-selection/speciality-selection.component.ts
import { Component, OnInit, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { Hospital, DoctorDetails, Speciality } from '../../../interfaces/order.interface';
import { OrderService } from '../../../services/order.service';

interface PhoneItem {
  isLabel: boolean;
  text: string;
}

@Component({
  selector: 'app-speciality-selection',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './speciality-selection.component.html',
  styleUrl: './speciality-selection.component.scss'
})
export class SpecialitySelectionComponent implements OnInit, OnDestroy {
  hospital: Hospital | null = null;
  specialities: Speciality[] = [];
  loading = false;
  error: string | null = null;
  isMobile = false;
  isDetailsOpen = false;

  constructor(
    private router: Router,
    private orderService: OrderService
  ) {
    const state = this.router.getCurrentNavigation()?.extras.state;
    if (state && 'hospital' in state) {
      this.hospital = state['hospital'];
      console.log('Received hospital in constructor:', this.hospital);
    }
    this.checkScreenSize();
  }

  ngOnInit(): void {
    if (!this.hospital || typeof this.hospital.hospitalId !== 'number') {
      console.warn('No hospital data or invalid hospital ID:', this.hospital);
      this.router.navigate(['/order']);
      return;
    }
    this.loadSpecialities();
    window.addEventListener('resize', this.checkScreenSize.bind(this));
  }

  ngOnDestroy(): void {
    window.removeEventListener('resize', this.checkScreenSize.bind(this));
  }

  private checkScreenSize(): void {
    this.isMobile = window.innerWidth <= 768;
  }

  toggleDetails(): void {
    this.isDetailsOpen = !this.isDetailsOpen;
  }

  private loadSpecialities(): void {
    if (typeof this.hospital?.hospitalId !== 'number') {
      console.error('No hospital ID available or invalid ID type');
      this.error = 'Ошибка: данные о больнице отсутствуют';
      return;
    }

    console.log('Loading specialities for hospital ID:', this.hospital.hospitalId);
    this.loading = true;
    this.error = null;

    this.orderService.getSpecialities(this.hospital.hospitalId).subscribe({
      next: (specialities) => {
        console.log('Loaded specialities:', specialities);
        this.specialities = specialities;
        this.loading = false;
      },
      error: (error) => {
        console.error('Error loading specialities:', error);
        this.error = 'Ошибка при загрузке специальностей';
        this.loading = false;
      }
    });
  }

  loadDoctors(specialityId: number): void {
    if (!this.hospital) return;
    
    this.loading = true;
    this.orderService.getDoctorsBySpecialityAndHospital(this.hospital.hospitalId, specialityId)
      .subscribe({
        next: (doctors: DoctorDetails[]) => {
          console.log('Loaded doctors:', doctors);
          this.loading = false;
        },
        error: (error: any) => {
          console.error('Error loading doctors:', error);
          this.error = 'Ошибка при загрузке списка врачей';
          this.loading = false;
        }
      });
  }

  selectSpeciality(speciality: Speciality): void {
    console.log('Selecting speciality:', speciality);
    this.router.navigate(['/order/doctor'], {
      state: { 
        hospital: this.hospital,
        speciality: {
          id: speciality.doctorsSpecialityId,
          name: speciality.name,
          link: speciality.link,
          description: speciality.description
        }
      }
    });
  }

  // Вспомогательный метод для разбивки массива на чанки
  getChunks(arr: any[], size: number): any[][] {
    const chunks = [];
    for (let i = 0; i < arr.length; i += size) {
      chunks.push(arr.slice(i, i + size));
    }
    return chunks;
  }

  getWorkingHours(day: string): string {
    if (!this.hospital?.workingHours) return '';
    
    // Если круглосуточно
    if (this.hospital.workingHours.toLowerCase().includes('круглосуточно')) {
      return 'круглосуточно';
    }

    // Разбиваем строку по запятым и ищем нужный день
    const schedules = this.hospital.workingHours.split(',');
    const daySchedule = schedules.find(schedule => 
      schedule.trim().startsWith(day)
    );
    
    if (daySchedule) {
      // Используем регулярное выражение для извлечения времени
      const timeMatch = daySchedule.match(/(?:ПН-ПТ|СБ):\s*([\d:-]+)/);
      return timeMatch ? timeMatch[1].trim() : '';
    }

    return '';
  }

  getPhones(): PhoneItem[] {
    if (!this.hospital?.phones) return [];
    
    const result: PhoneItem[] = [];
    const sections = this.hospital.phones.split(/(?=(?:Регистратура:|Женская консультация:|Стоматология:|Студенческая деревня:))/);
    
    sections.forEach(section => {
      if (!section.trim()) return;
      
      // Разбиваем секцию на метку и номера
      const [label, ...numbers] = section.split(/(?=\+)/);
      
      if (label.trim()) {
        // Добавляем метку как некликабельный элемент
        result.push({ isLabel: true, text: label.trim() });
      }
      
      // Добавляем каждый номер как кликабельный элемент
      numbers.forEach(number => {
        if (number.trim()) {
          result.push({ isLabel: false, text: number.trim() });
        }
      });
    });
    
    return result;
  }

  getDomain(url: string | undefined): string {
    if (!url) return '';
    return url.replace(/^https?:\/\//, '');
  }
}


FILE: TalonByAngular/src/app/modules/order/speciality-selection/speciality-selection.module.ts
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { SpecialitySelectionRoutingModule } from './speciality-selection-routing.module';
import { SpecialitySelectionComponent } from './speciality-selection.component';

@NgModule({
  declarations: [],
  imports: [
    CommonModule,
    SpecialitySelectionRoutingModule
  ]
})
export class SpecialitySelectionModule { }


FILE: TalonByAngular/src/app/modules/paid-services/paid-services.component.html
<p>paid-services works!</p>


FILE: TalonByAngular/src/app/modules/paid-services/paid-services.component.scss


FILE: TalonByAngular/src/app/modules/paid-services/paid-services.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PaidServicesComponent } from './paid-services.component';

describe('PaidServicesComponent', () => {
  let component: PaidServicesComponent;
  let fixture: ComponentFixture<PaidServicesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [PaidServicesComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(PaidServicesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


FILE: TalonByAngular/src/app/modules/paid-services/paid-services.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-paid-services',
  standalone: true,
  imports: [],
  templateUrl: './paid-services.component.html',
  styleUrl: './paid-services.component.scss'
})
export class PaidServicesComponent {

}


FILE: TalonByAngular/src/app/modules/register/register.component.html
<div class="registration-container">
  <h2 class="registration-title">Регистрация</h2>
  <form
    class="registration-form"
    [formGroup]="registrationForm"
    (ngSubmit)="onSubmit()"
  >
    <div class="form-group">
      <label for="email">E-mail</label>
      <input
        type="email"
        id="email"
        name="email"
        formControlName="email"
        required
      />
    </div>
    <div class="form-group">
      <label for="password">Пароль</label>
      <input
        type="password"
        id="password"
        name="password"
        formControlName="password"
        required
      />
    </div>
    <div class="form-group">
      <label for="telephone">Телефон</label>
      <input
        type="telephone"
        id="telephone"
        name="telephone"
        formControlName="telephone"
        required
      />
    </div>
    <button type="submit" class="registration-button">Продолжить</button>
    <div *ngIf="errorMessage" class="error-message">{{ errorMessage }}</div>
  </form>
  <a href="/login" class="login-link">Уже есть аккаунт</a>
</div>


FILE: TalonByAngular/src/app/modules/register/register.component.scss
@import "@angular/material/prebuilt-themes/indigo-pink.css";

.registration-container {
  font-family: "Roboto", sans-serif;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  padding: 32px;
  background-color: #f5f5f5;
  animation: fadeIn 0.5s ease-in-out;

  .registration-title {
    margin-bottom: 24px;
    animation: slideDown 0.5s ease-in-out;
  }

  .registration-form {
    width: 100%;
    max-width: 400px;
    animation: scaleUp 0.5s ease-in-out;

    .form-group {
      margin-bottom: 16px;

      label {
        display: block;
        margin-bottom: 4px;
        font-weight: bold;
        animation: fadeIn 0.3s ease-in-out;
      }

      input {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 16px;
        animation: slideRight 0.3s ease-in-out;
      }
    }

    .registration-button {
      width: 100%;
      padding: 12px 24px;
      background-color: #007bff;
      color: #fff;
      border: none;
      border-radius: 4px;
      font-size: 16px;
      cursor: pointer;
      animation: bounce 0.5s ease-in-out;

      &:hover {
        background-color: #0056b3;
      }
    }
  }

  .login-link {
    margin-top: 16px;
    color: #007bff;
    text-decoration: none;
    animation: fadeIn 0.5s ease-in-out;

    &:hover {
      color: #0056b3;
    }
  }
}

@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

@keyframes slideDown {
  0% {
    transform: translateY(-20px);
    opacity: 0;
  }
  100% {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes scaleUp {
  0% {
    transform: scale(0.8);
    opacity: 0;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes slideRight {
  0% {
    transform: translateX(-20px);
    opacity: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes bounce {
  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-10px);
  }
  60% {
    transform: translateY(-5px);
  }
}


FILE: TalonByAngular/src/app/modules/register/register.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { RegisterComponent } from './register.component';

describe('RegisterComponent', () => {
  let component: RegisterComponent;
  let fixture: ComponentFixture<RegisterComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [RegisterComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(RegisterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


FILE: TalonByAngular/src/app/modules/register/register.component.ts
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { RegisterService } from './register.service';
import { ReactiveFormsModule } from '@angular/forms';

@Component({
  selector: 'app-register',
  standalone: true,
  imports: [
    CommonModule,
    MatButtonModule,
    MatInputModule,
    MatFormFieldModule,
    ReactiveFormsModule,
  ],
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.scss'],
})
export class RegisterComponent {
  registrationForm: FormGroup;
  errorMessage: string = '';

  constructor(
    private formBuilder: FormBuilder,
    private registerService: RegisterService,
    private router: Router
  ) {
    this.registrationForm = this.formBuilder.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]],
      telephone: ['', [Validators.required, Validators.minLength(6)]],
    });
  }
  ngOnInit() {
    const url = window.location.href.toLowerCase();
    if (url.includes('register')) {
      this.router.navigate(['/register']);
    }
  }
  onSubmit() {
    if (this.registrationForm.valid) {
      this.registerService
        .register(
          this.registrationForm.get('email')?.value,
          this.registrationForm.get('password')?.value,
          this.registrationForm.get('telephone')?.value
        )
        .subscribe(
          (response) => {
            // Сохранение токена аутентификации
            if (response != null && response.token) {
              localStorage.setItem('authToken', response.token);
            }
            console.log('Пользователь зарегистрирован');
            this.router.navigate(['/login']);
          },
          (error) => {
            // Обработка ошибок
            this.errorMessage =
              error.message || 'Произошла ошибка при регистрации.';
          }
        );
    }
  }
}


FILE: TalonByAngular/src/app/modules/register/register.service.ts
// register.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class RegisterService {
  private apiUrl = 'http://localhost:36837/auth/register';

  constructor(private http: HttpClient) {}

  register(email: string, password: string, Phone: string): Observable<any> {
    const data = { email, password, Phone };
    return this.http.post(this.apiUrl, data);
  }
}


FILE: TalonByAngular/src/app/pipes/nl2br.pipe.ts
import { Pipe, PipeTransform } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';

@Pipe({
  name: 'nl2br'
})
export class Nl2brPipe implements PipeTransform {
  constructor(private sanitizer: DomSanitizer) {}

  transform(value: string): any {
    if (!value) return value;
    return this.sanitizer.bypassSecurityTrustHtml(value.replace(/\n/g, '<br>'));
  }
} 


FILE: TalonByAngular/src/app/services/medical-institutions.service.spec.ts
import { TestBed } from '@angular/core/testing';

import { MedicalInstitutionsService } from './medical-institutions.service';

describe('MedicalInstitutionsService', () => {
  let service: MedicalInstitutionsService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(MedicalInstitutionsService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


FILE: TalonByAngular/src/app/services/medical-institutions.service.ts
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class MedicalInstitutionsService {

  constructor() { }
}


FILE: TalonByAngular/src/app/services/order.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, map } from 'rxjs';
import { Hospital, Doctor, TimeSlot, Appointment, Speciality, DoctorDetails } from '../interfaces/order.interface';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class OrderService {
  private readonly apiUrl = environment.apiUrl;

  constructor(private http: HttpClient) {}

  getHospitals(): Observable<Hospital[]> {
    return this.http.get<any>(`${this.apiUrl}/Hospital/GetAllHospitals`).pipe(
      map(response => {
        const hospitals = response.$values || [];
        return hospitals.map((hospital: any) => ({
          hospitalId: Number(hospital.hospitalId),
          name: hospital.name?.trim(),
          address: hospital.address,
          type: hospital.type,
          workingHours: hospital.workingHours,
          phones: hospital.phones,
          email: hospital.email,
          description: hospital.description
        }));
      })
    );
  }

  // Получение специальностей для больницы
  getSpecialities(hospitalId: number): Observable<Speciality[]> {
    return this.http.get<any>(`${this.apiUrl}/DoctorsSpeciality/GetByHospital/${hospitalId}`)
      .pipe(
        map(response => {
          console.log('Raw specialities response:', response); // Для отладки
          const specialities = response.$values || response;
          return specialities.map((spec: any) => ({
            doctorsSpecialityId: spec.doctorsSpecialityId,
            name: spec.name,
            link: '',
            description: spec.description
          }));
        })
      );
  }

  // Получение докторов по больнице
  getDoctorsByHospital(hospitalId: number): Observable<DoctorDetails[]> {
    return this.http.get<any>(`${this.apiUrl}/Doctor/GetByHospital/${hospitalId}`)
      .pipe(
        map(response => response.$values || [])
      );
  }

  // Получение докторов по специальности
  getDoctorsBySpeciality(specialityId: number): Observable<DoctorDetails[]> {
    return this.http.get<DoctorDetails[]>(`${this.apiUrl}/Doctor/GetBySpeciality/${specialityId}`);
  }

  // Получение докторов по специальности и больнице
  getDoctorsBySpecialityAndHospital(hospitalId: number, specialityId: number): Observable<DoctorDetails[]> {
    return this.http.get<any>(`${this.apiUrl}/Doctor/GetBySpecialtyAndHospital/${hospitalId}/${specialityId}`)
      .pipe(
        map(response => {
          console.log('Raw doctors response:', response); // Для отладки
          return response.$values || response;
        })
      );
  }

  getTimeSlots(doctorId: number, date: string): Observable<TimeSlot[]> {
    return this.http.get<TimeSlot[]>(`${this.apiUrl}/doctors/${doctorId}/timeslots`, {
      params: { date }
    });
  }

  createAppointment(appointment: Omit<Appointment, 'id' | 'createdAt'>): Observable<Appointment> {
    return this.http.post<Appointment>(`${this.apiUrl}/order`, appointment);
  }
} 


FILE: TalonByAngular/src/environments/environment.ts
export const environment = {
  production: false,
  apiUrl: 'http://localhost:5297/api'
}; 


FILE: TalonByAngular/src/index.html
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>TalonByAngular</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>


FILE: TalonByAngular/src/main.ts
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));


FILE: TalonByAngular/src/styles.scss
/* You can add global styles to this file, and also import other style files */

:root {
  --primary-color: #FF5722;  
  --text-color: #333333;
  --background-color: #f5f5f5; // Светло-серый фон
  --white-color: #FFFFFF;
}

body {
  font-family: 'Roboto', sans-serif;
  color: var(--text-color);
  background-color: var(--background-color);
  margin: 0;
  padding: 0;
}

header, footer {
  background-color: var(--white-color);
}


FILE: TalonByAngular/tsconfig.app.json
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}


FILE: TalonByAngular/tsconfig.json
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "sourceMap": true,
    "declaration": false,
    "experimentalDecorators": true,
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022",
    "useDefineForClassFields": false,
    "lib": ["ES2022", "dom"]
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}


FILE: TalonByAngular/tsconfig.spec.json
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}


FILE: package.json
{
  "dependencies": {
    "@angular/common": "^19.1.5"
  }
}


